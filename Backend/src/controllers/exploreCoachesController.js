// Backend/src/controllers/exploreCoachesController.js

import path from 'path'; 
import { fileURLToPath } from 'url';
import { Op } from 'sequelize';

// --- Model Imports ---
import User from '../models/user.js'; 
import CoachProfile from '../models/CoachProfile.js'; 
import Testimonial from '../models/Testimonial.js'; 
import Session from '../models/Session.js'; 
import Follow from '../models/Follow.js'; 
import Booking from '../models/Booking.js'; 
import ClientProfile from '../models/ClientProfile.js'; 
// ---------------------

// === Helper: Safe JSON parse (required for database fields) ===
const safeParse = (value) => {
Â  if (typeof value === 'string') {
Â  Â  try { return JSON.parse(value); } catch { return value; }
Â  }
Â  return value;
};

// ==============================
// GET Public Coach Profile (by ID) 
// ==============================
export const getPublicCoachProfile = async (req, res) => { 
Â  try {
Â  Â  const coachId = req.params.id;
Â  Â  // ðŸš¨ NEW: Get viewer ID from authentication middleware if available
Â  Â  const viewerId = req.user?.userId || null; 

Â  Â  // Step 1: Find the coach profile
Â  Â  const coachProfile = await CoachProfile.findOne({
Â  Â  Â  where: { userId: coachId }, // coachId = User ID
Â  Â  Â  include: [
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  model: User,
Â  Â  Â  Â  Â  as: 'user', 
Â  Â  Â  Â  Â  attributes: ['id', 'firstName', 'lastName', 'email', 'phone', 'profilePicture'], 
Â  Â  Â  Â  },
Â  Â  Â  Â  { // Testimonials received by this coach
Â  Â  Â  Â  Â  model: Testimonial,
Â  Â  Â  Â  Â  as: 'testimonials',
Â  Â  Â  Â  Â  required: false,
Â  Â  Â  Â  Â  attributes: ['id', 'clientId', 'clientTitle', 'rating', 'content', 'date', 'sessionType'], 
Â  Â  Â  Â  Â  include: [{ 
Â  Â  Â  Â  Â  Â  model: User,
Â  Â  Â  Â  Â  Â  as: 'clientUser', 
Â  Â  Â  Â  Â  Â  attributes: ['id', 'firstName', 'lastName', 'profilePicture'],
Â  Â  Â  Â  Â  }]
Â  Â  Â  Â  },
Â  Â  Â  Â  { // Include the coach's available services
Â  Â  Â  Â  Â  model: Session,
Â  Â  Â  Â  Â  as: 'sessions', 
Â  Â  Â  Â  Â  required: false,
Â  Â  Â  Â  }
Â  Â  Â  ],
Â  Â  });

Â  Â  if (!coachProfile || !coachProfile.user) {
Â  Â  Â  return res.status(404).json({ error: 'Coach profile not found' });
Â  Â  }

Â  Â  // CRITICAL: Parse JSON strings before sending to the frontend
Â  Â  let plainCoachProfile = coachProfile.get({ plain: true });
Â  Â  
Â  Â  if (plainCoachProfile.specialties) plainCoachProfile.specialties = safeParse(plainCoachProfile.specialties);
Â  Â  if (plainCoachProfile.education) plainCoachProfile.education = safeParse(plainCoachProfile.education);
Â  Â  if (plainCoachProfile.certifications) plainCoachProfile.certifications = safeParse(plainCoachProfile.certifications);
Â  Â  if (plainCoachProfile.pricing) plainCoachProfile.pricing = safeParse(plainCoachProfile.pricing); 
Â  Â  if (plainCoachProfile.availability) plainCoachProfile.availability = safeParse(plainCoachProfile.availability);

Â  Â  const user = plainCoachProfile.user;

Â  Â  // ðŸš¨ NEW LOGIC: Post-process sessions to check for existing bookings
Â  Â  let availableSessions = plainCoachProfile.sessions || [];

Â  Â  if (viewerId && availableSessions.length > 0) {
Â  Â  Â  Â  // Find active bookings for this client for any of these sessions
Â  Â  Â  Â  const clientBookings = await Booking.findAll({
Â  Â  Â  Â  Â  Â  where: { 
Â  Â  Â  Â  Â  Â  Â  Â  clientId: viewerId,
Â  Â  Â  Â  Â  Â  Â  Â  sessionId: { [Op.in]: availableSessions.map(s => s.id) },
Â  Â  Â  Â  Â  Â  Â  Â  // Check for any active status (confirmed, pending, etc.) excluding 'cancelled'
Â  Â  Â  Â  Â  Â  Â  Â  status: { [Op.ne]: 'cancelled' } 
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  attributes: ['sessionId', 'status'],
Â  Â  Â  Â  });

Â  Â  Â  Â  const bookedMap = clientBookings.reduce((map, b) => {
Â  Â  Â  Â  Â  Â  map.set(b.sessionId, b.status);
Â  Â  Â  Â  Â  Â  return map;
Â  Â  Â  Â  }, new Map());
Â  Â  Â  Â  
Â  Â  Â  Â  availableSessions = availableSessions.map(session => ({
Â  Â  Â  Â  Â  Â  ...session,
Â  Â  Â  Â  Â  Â  isBooked: bookedMap.has(session.id), // <-- NEW FLAG: true if an active booking exists
Â  Â  Â  Â  Â  Â  bookingStatus: bookedMap.get(session.id) || null // <-- NEW STATUS
Â  Â  Â  Â  }));
Â  Â  }
Â  Â  // ðŸš¨ END NEW LOGIC

Â  Â  // Format testimonials to include the client's name/avatar from the User model
Â  Â  const formattedTestimonials = (plainCoachProfile.testimonials || []).map(t => ({
Â  Â  Â  Â  id: t.id,
Â  Â  Â  Â  clientId: t.clientId,
Â  Â  Â  Â  clientName: t.clientUser ? `${t.clientUser.firstName} ${t.clientUser.lastName}` : 'Anonymous Client',
Â  Â  Â  Â  clientAvatar: t.clientUser?.profilePicture || '/default-avatar.png', 
Â  Â  Â  Â  clientTitle: t.clientTitle,
Â  Â  Â  Â  rating: t.rating,
Â  Â  Â  Â  content: t.content,
Â  Â  Â  Â  date: t.date,
Â  Â  Â  Â  sessionType: t.sessionType,
Â  Â  }));

Â  Â  // Step 2: Construct final object
Â  Â  const profile = {
Â  Â  Â  id: user.id,
Â  Â  Â  name: `${user.firstName} ${user.lastName}`,
Â  Â  Â  email: user.email,
Â  Â  Â  phone: user.phone,
Â  Â  Â  profileImage: plainCoachProfile.profilePicture || user.profilePicture, 
Â  Â  Â  testimonials: formattedTestimonials,
Â  Â  Â  availableSessions: availableSessions, // <-- Use the processed array
Â  Â  Â  title: plainCoachProfile.professionalTitle,
Â  Â  Â  rating: 4.9, 
Â  Â  Â  totalReviews: formattedTestimonials.length,
Â  Â  Â  totalClients: 0,
Â  Â  Â  yearsExperience: plainCoachProfile.yearsOfExperience || 0,
Â  Â  Â  shortBio: plainCoachProfile.bio ? plainCoachProfile.bio.substring(0, 150) + '...' : '',
Â  Â  Â  fullBio: plainCoachProfile.bio || '',
Â  Â  Â  isAvailable: true,
Â  Â  Â  avgResponseTime: plainCoachProfile.responseTime || 'within-4h',
Â  Â  Â  timezone: plainCoachProfile.availability?.timezone || 'UTC',
Â  Â  Â  startingPrice: plainCoachProfile.pricing?.individual || plainCoachProfile.sessions?.[0]?.price || 0,
Â  Â  Â  specialties: plainCoachProfile.specialties || [],
Â  Â  Â  education: plainCoachProfile.education || [],
Â  Â  Â  certifications: plainCoachProfile.certifications || [],
Â  Â  Â  linkedinUrl: plainCoachProfile.linkedinUrl,
Â  Â  Â  twitterUrl: plainCoachProfile.twitterUrl,
Â  Â  Â  instagramUrl: plainCoachProfile.instagramUrl,
Â  Â  Â  facebookUrl: plainCoachProfile.facebookUrl,
Â  Â  Â  dateOfBirth: plainCoachProfile.dateOfBirth,
Â  Â  Â  gender: plainCoachProfile.gender,
Â  Â  Â  ethnicity: plainCoachProfile.ethnicity,
Â  Â  Â  country: plainCoachProfile.country,
Â  Â  };

Â  Â  res.status(200).json({ coach: profile });
Â  } catch (error) {
Â  Â  console.error('Error fetching public coach profile:', error);
Â  Â  res.status(500).json({ error: 'Failed to fetch public profile' });
Â  }
};

// ==============================
// GET All Coach Profiles (for client discovery)
// ===================================
export const getAllCoachProfiles = async (req, res) => { 
Â  try {
Â  Â  const { search, audience } = req.query;
Â  Â  const whereClause = { /* ... omitted search logic ... */ };

Â  Â  const coaches = await User.findAll({
Â  Â  Â  Â  // ... (omitted User attributes and where clause)
Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  model: CoachProfile, 
Â  Â  Â  Â  Â  Â  Â  Â  as: 'CoachProfile',
Â  Â  Â  Â  Â  Â  Â  Â  // ... (omitted where clause)
Â  Â  Â  Â  Â  Â  Â  Â  required: true,
Â  Â  Â  Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { // For rating calculation
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model: Testimonial,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  as: 'testimonials',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  attributes: ['rating'], 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required: false,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { // For price calculation
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model: Session,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  as: 'sessions', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  attributes: ['price'], 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required: false,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  ],
        // FIX: Removed the problematic group clause
Â  Â  Â  Â  // group: ['User.id', 'CoachProfile.id', 'CoachProfile.testimonials.id', 'CoachProfile.sessions.id']
Â  Â  });

Â  Â  const processedCoaches = coaches.map(coach => {
Â  Â  Â  Â  const plainCoach = coach.get({ plain: true });
Â  Â  Â  Â  const profile = plainCoach.CoachProfile;
Â  Â  Â  Â  
Â  Â  Â  Â  if (profile) {
Â  Â  Â  Â  Â  Â  profile.specialties = safeParse(profile.specialties);
Â  Â  Â  Â  Â  Â  profile.pricing = safeParse(profile.pricing);
Â  Â  Â  Â  }

Â  Â  Â  Â  const ratings = profile?.testimonials?.map(t => t.rating) || [];
Â  Â  Â  Â  const prices = profile?.sessions?.map(s => s.price) || [];
Â  Â  Â  Â  
Â  Â  Â  Â  const averageRating = ratings.length > 0 
Â  Â  Â  Â  Â  Â  ? (ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length).toFixed(1)
Â  Â  Â  Â  Â  Â  : '0.0';
Â  Â  Â  Â  
Â  Â  Â  Â  // Calculate minimum price from available sessions, falling back to pricing JSON
Â  Â  Â  Â  const startingPrice = prices.length > 0
Â  Â  Â  Â  Â  Â  ? Math.min(...prices)
Â  Â  Â  Â  Â  Â  : profile?.pricing?.individual || 0; 

Â  Â  Â  Â  
Â  Â  Â  Â  return {
Â  Â  Â  Â  id: plainCoach.id,
Â  Â  Â  Â  firstName: plainCoach.firstName, 
Â  Â  Â  Â  lastName: plainCoach.lastName, Â  
Â  Â  Â  Â  profilePicture: plainCoach.profilePicture, 
Â  Â  Â  Â  title: profile?.professionalTitle,
Â  Â  Â  Â  shortBio: profile?.bio ? profile.bio.substring(0, 150) + '...' : '',
Â  Â  Â  Â  specialties: profile?.specialties || [],
Â  Â  Â  Â  startingPrice: startingPrice,
Â  Â  Â  Â  rating: parseFloat(averageRating),
Â  Â  Â  Â  totalReviews: ratings.length,
Â  Â  };
});

Â  Â  res.status(200).json({ coaches: processedCoaches });
Â  } catch (error) {
Â  Â  console.error('Error fetching all coach profiles:', error);
Â  Â  res.status(500).json({ error: 'Failed to fetch coach profiles' });
Â  }
};

// ==============================
// GET Follow Status
// ==============================
export const getFollowStatus = async (req, res) => { 
Â  Â  try {
Â  Â  Â  Â  const coachId = req.params.coachId; 
Â  Â  Â  Â  const followerId = req.user.userId; 

Â  Â  Â  Â  if (followerId.toString() === coachId.toString()) {
Â  Â  Â  Â  Â  Â  return res.status(200).json({ isFollowing: false });
Â  Â  Â  Â  }

Â  Â  Â  Â  const followRecord = await Follow.findOne({
Â  Â  Â  Â  Â  Â  where: {
Â  Â  Â  Â  Â  Â  Â  Â  followerId: followerId,
Â  Â  Â  Â  Â  Â  Â  Â  followingId: coachId
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  res.status(200).json({ isFollowing: !!followRecord });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error checking follow status (MySQL):', error);
Â  Â  Â  Â  res.status(500).json({ message: 'Server error when checking follow status.' });
Â  Â  }
};

// ==============================
// POST Follow Coach
// ==============================
export const followCoach = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const coachId = req.params.coachId;
Â  Â  Â  Â  const followerId = req.user.userId;

Â  Â  Â  Â  if (followerId.toString() === coachId.toString()) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ message: 'Cannot follow yourself.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const [followRecord, created] = await Follow.findOrCreate({
Â  Â  Â  Â  Â  Â  where: {
Â  Â  Â  Â  Â  Â  Â  Â  followerId: followerId,
Â  Â  Â  Â  Â  Â  Â  Â  followingId: coachId
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  defaults: {
Â  Â  Â  Â  Â  Â  Â  Â  followerId: followerId,
Â  Â  Â  Â  Â  Â  Â  Â  followingId: coachId
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  if (!created) {
Â  Â  Â  Â  Â  Â  return res.status(200).json({ message: 'Coach already followed.', isFollowing: true });
Â  Â  Â  Â  }

Â  Â  Â  Â  res.status(201).json({ message: 'Coach followed successfully!', isFollowing: true });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error following coach (MySQL):', error);
Â  Â  Â  Â  res.status(500).json({ message: 'Server error when attempting to follow coach.' });
Â  Â  }
};

// ==============================
// DELETE Unfollow Coach
// ==============================
export const unfollowCoach = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const coachId = req.params.coachId;
Â  Â  Â  Â  const followerId = req.user.userId;

Â  Â  Â  Â  if (followerId.toString() === coachId.toString()) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ message: 'Cannot unfollow yourself.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const result = await Follow.destroy({
Â  Â  Â  Â  Â  Â  where: {
Â  Â  Â  Â  Â  Â  Â  Â  followerId: followerId,
Â  Â  Â  Â  Â  Â  Â  Â  followingId: coachId
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  if (result === 0) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ message: 'Follow record not found.', isFollowing: false });
Â  Â  Â  Â  }

Â  Â  Â  Â  res.status(200).json({ message: 'Coach unfollowed successfully!', isFollowing: false });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error unfollowing coach (MySQL):', error);
Â  Â  Â  Â  res.status(500).json({ message: 'Server error when attempting to unfollow coach.' });
Â  Â  }
};


// ==============================
// GET Followed Coaches (for client dashboard)
// ==============================
export const getFollowedCoaches = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const followerId = req.user.userId; 

Â  Â  Â  Â  const followedRecords = await Follow.findAll({
Â  Â  Â  Â  Â  Â  where: { followerId: followerId },
Â  Â  Â  Â  Â  Â  attributes: ['followingId'] 
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  const followedCoachIds = followedRecords.map(record => record.get('followingId'));

Â  Â  Â  Â  if (followedCoachIds.length === 0) {
Â  Â  Â  Â  Â  Â  return res.status(200).json({ coaches: [] });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Reuse the logic from getAllCoachProfiles to fetch the full data for these specific IDs
Â  Â  Â  Â  const coaches = await User.findAll({
Â  Â  Â  Â  Â  Â  where: { 
Â  Â  Â  Â  Â  Â  Â  Â  id: { [Op.in]: followedCoachIds },
Â  Â  Â  Â  Â  Â  Â  Â  roles: { [Op.like]: '%"coach"%' }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture'],
Â  Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model: CoachProfile, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  as: 'CoachProfile',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required: true,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { model: Testimonial, as: 'testimonials', attributes: ['rating'], required: false },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { model: Session, as: 'sessions', attributes: ['price'], required: false }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  ],
            // FIX: Removed the problematic group clause
Â  Â  Â  Â  Â  Â  // group: ['User.id', 'CoachProfile.id', 'CoachProfile.testimonials.id', 'CoachProfile.sessions.id']
Â  Â  Â  Â  });

Â  Â  Â  Â  // Apply the same data processing logic as getAllCoachProfiles
Â  Â  Â  Â  const processedCoaches = coaches.map(coach => {
Â  Â  Â  Â  Â  Â  const plainCoach = coach.get({ plain: true });
Â  Â  Â  Â  Â  Â  const profile = plainCoach.CoachProfile;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (profile) {
Â  Â  Â  Â  Â  Â  Â  Â  profile.specialties = safeParse(profile.specialties);
Â  Â  Â  Â  Â  Â  Â  Â  profile.pricing = safeParse(profile.pricing);
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  const ratings = profile?.testimonials?.map(t => t.rating) || [];
Â  Â  Â  Â  Â  Â  const prices = profile?.sessions?.map(s => s.price) || [];
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const averageRating = ratings.length > 0 
Â  Â  Â  Â  Â  Â  Â  Â  ? (ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length).toFixed(1)
Â  Â  Â  Â  Â  Â  Â  Â  : '0.0';
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const startingPrice = prices.length > 0
Â  Â  Â  Â  Â  Â  Â  Â  ? Math.min(...prices)
Â  Â  Â  Â  Â  Â  Â  Â  : profile?.pricing?.individual || 0; 

Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  id: plainCoach.id,
Â  Â  Â  Â  Â  Â  Â  Â  firstName: plainCoach.firstName, 
Â  Â  Â  Â  Â  Â  Â  Â  lastName: plainCoach.lastName, Â  
Â  Â  Â  Â  Â  Â  Â  Â  profilePicture: plainCoach.profilePicture, 
Â  Â  Â  Â  Â  Â  Â  Â  title: profile?.professionalTitle, 
Â  Â  Â  Â  Â  Â  Â  Â  shortBio: profile?.bio ? profile.bio.substring(0, 150) + '...' : '',
Â  Â  Â  Â  Â  Â  Â  Â  specialties: profile?.specialties || [],
Â  Â  Â  Â  Â  Â  Â  Â  startingPrice: startingPrice,
Â  Â  Â  Â  Â  Â  Â  Â  rating: parseFloat(averageRating),
Â  Â  Â  Â  Â  Â  Â  Â  totalReviews: ratings.length,
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  });

Â  Â  Â  Â  res.status(200).json({ coaches: processedCoaches });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching followed coaches:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Failed to fetch followed coaches' });
Â  Â  }
};

// ==============================
// GET Clients Who Follow This Coach
// ==============================
export const getClientsWhoFollow = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const coachId = req.user.userId; 

Â  Â  Â  Â  // 1. Find all Follow records where the current coach is the 'followingId'
Â  Â  Â  Â  const followerRecords = await Follow.findAll({
Â  Â  Â  Â  Â  Â  where: { followingId: coachId },
Â  Â  Â  Â  Â  Â  attributes: ['followerId'] 
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  const followerIds = followerRecords.map(record => record.get('followerId'));

Â  Â  Â  Â  if (followerIds.length === 0) {
Â  Â  Â  Â  Â  Â  return res.status(200).json({ clients: [] });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // 2. Fetch the full User data for all followers, ensuring they are clients
Â  Â  Â  Â  const clients = await User.findAll({
Â  Â  Â  Â  Â  Â  where: { 
Â  Â  Â  Â  Â  Â  Â  Â  id: { [Op.in]: followerIds },
Â  Â  Â  Â  Â  Â  Â  Â  roles: { [Op.like]: '%"client"%' } // Optional: Filter for only 'client' roles
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture', 'roles'],
Â  Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  Â  Â  { model: ClientProfile, as: 'ClientProfile', required: false, attributes: ['coachingGoals'] }
Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  });

Â  Â  Â  Â  const processedClients = clients.map(client => client.get({ plain: true }));

Â  Â  Â  Â  return res.status(200).json({ clients: processedClients });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching clients who follow coach:', error);
Â  Â  Â  Â  return res.status(500).json({ error: 'Failed to fetch follower clients.' });
Â  Â  }
};