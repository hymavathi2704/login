import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Input from '../../../components/ui/Input';
import Button from '../../../components/ui/Button';
import { Checkbox } from '../../../components/ui/Checkbox';
import Icon from '../../../components/AppIcon';
// ðŸ”‘ NEW IMPORTS for Select components
import Select, { SelectTrigger, SelectValue, SelectContent, SelectItem } from '../../../components/ui/Select'; 
import { Tag } from 'lucide-react'; 

// List of popular specialties adapted from ProfessionalSection
const popularSpecialties = [
  'Life Coaching', 'Business Coaching', 'Career Coaching', 'Executive Coaching',
  'Health & Wellness', 'Relationship Coaching', 'Leadership Development',
  'Performance Coaching', 'Financial Coaching', 'Mindfulness & Meditation'
];

const RegistrationForm = ({ onSubmit, isLoading }) => {
Â  const [formData, setFormData] = useState({
Â  Â  // Core fields
Â  Â  firstName: '',
Â  Â  lastName: '',
Â  Â  email: '',
Â  Â  password: '',
Â  Â  confirmPassword: '',
Â  Â  agreeToTerms: false,
    // ðŸ”‘ NEW: Role with default 'client'
    role: 'client', 
    // ðŸ”‘ NEW: Specialty (holds the final selected/custom value sent to backend)
    specialty: '', 
Â  });

Â  const [errors, setErrors] = useState({});
Â  const [passwordStrength, setPasswordStrength] = useState(0);
Â  const [showPassword, setShowPassword] = useState(false);
Â  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  // ðŸ”‘ NEW STATES for specialty dropdown control
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [customSpecialty, setCustomSpecialty] = useState('');

Â  const validatePassword = (password) => {
Â  Â  let strength = 0;
Â  Â  if (password?.length >= 8) strength++;
Â  Â  if (/[A-Z]/.test(password)) strength++;
Â  Â  if (/[a-z]/.test(password)) strength++;
Â  Â  if (/[0-9]/.test(password)) strength++;
Â  Â  if (/[^A-Za-z0-9]/.test(password)) strength++;
Â  Â  return strength;
Â  };

Â  const getPasswordStrengthText = (strength) => {
Â  Â  switch (strength) {
Â  Â  Â  case 0: case 1: return 'Weak';
Â  Â  Â  case 2: case 3: return 'Medium';
Â  Â  Â  case 4: case 5: return 'Strong';
Â  Â  Â  default: return '';
Â  Â  }
Â  };

Â  const getPasswordStrengthColor = (strength) => {
Â  Â  switch (strength) {
Â  Â  Â  case 0: case 1: return 'bg-red-500';
Â  Â  Â  case 2: case 3: return 'bg-yellow-500';
Â  Â  Â  case 4: case 5: return 'bg-green-500';
Â  Â  Â  default: return 'bg-gray-200';
Â  Â  }
Â  };

Â  const handleInputChange = (e) => {
Â  Â  const { name, value, type, checked } = e.target;
Â  Â  const inputValue = type === 'checkbox' ? checked : value;
Â  Â  setFormData(prev => ({ ...prev, [name]: inputValue }));
    
    // ðŸ”‘ MODIFIED: Handle role change
    if (name === 'role') {
        if (value === 'client') {
            // Clear specialty-related states if role is client
            setFormData(prev => ({ ...prev, specialty: '' }));
            setSelectedSpecialty('');
            setCustomSpecialty('');
        } else if (value === 'coach') {
            // If switching to coach, ensure formData.specialty is reset to force selection/input validation
            setFormData(prev => ({ ...prev, specialty: '' }));
        }
    }
    
Â  Â  if (errors[name]) setErrors(prev => ({ ...prev, [name]: '' }));
Â  Â  if (name === 'password') setPasswordStrength(validatePassword(value));
Â  };

  // ðŸ”‘ NEW: Handler for Select component
  const handleSpecialtySelect = (value) => {
      setSelectedSpecialty(value);
      setCustomSpecialty(''); // Clear custom input when a selection is made
      setErrors(prev => ({ ...prev, specialty: '' })); 
      
      // If a popular specialty is selected, set it in the final form data
      if (value !== 'other' && value !== 'disabled-placeholder') { 
          setFormData(prev => ({ ...prev, specialty: value }));
      } else {
          // If 'other' or placeholder is selected, clear the final specialty value (will be set by custom input or remain empty)
          setFormData(prev => ({ ...prev, specialty: '' }));
      }
  };
  
  // ðŸ”‘ NEW: Handler for custom specialty input
  const handleCustomSpecialtyChange = (e) => {
      const value = e.target.value;
      setCustomSpecialty(value);
      // Update the final form data with the custom value as user types
      setFormData(prev => ({ ...prev, specialty: value })); 
      if (errors.specialty) setErrors(prev => ({ ...prev, specialty: '' }));
  };


// ===================================
Â  // ðŸ”‘ NEW: Handlers for Pop-up messages
Â  // ===================================
Â  const handleTermsClick = (e) => {
Â  Â  e.preventDefault(); // Stop navigation
Â  Â  window.alert("Terms of Service:\n\nThese terms are currently under development. By proceeding, you agree to the default terms of use for beta software.");
Â  };

Â  const handlePrivacyClick = (e) => {
Â  Â  e.preventDefault(); // Stop navigation
Â  Â  window.alert("Privacy Policy:\n\nThis policy is currently under development. Your data will be treated securely and will not be shared with third parties.");
Â  };
Â  // ===================================

Â  const validateForm = () => {
Â  Â  const newErrors = {};
    
    // ðŸ”‘ UPDATED: Validate specialty if role is coach AND the final formData.specialty is empty
    if (formData.role === 'coach' && !formData.specialty.trim()) {
      newErrors.specialty = 'Primary coaching specialty is required for coach registration.';
    }
    
Â  Â  // ðŸ”‘ MODIFIED: Validate First Name
Â  Â  if (!formData.firstName.trim() || formData.firstName.trim().length < 2) 
Â  Â  Â  Â  newErrors.firstName = 'First name must be at least 2 characters';
Â  Â  // ðŸ”‘ MODIFIED: Validate Last Name
Â  Â  if (!formData.lastName.trim() || formData.lastName.trim().length < 2) 
Â  Â  Â  Â  newErrors.lastName = 'Last name must be at least 2 characters';
Â  Â  Â  Â  
Â  Â  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
Â  Â  if (!formData.email) newErrors.email = 'Email is required';
Â  Â  else if (!emailRegex.test(formData.email)) newErrors.email = 'Please enter a valid email address';
Â  Â  
Â  Â  if (!formData.password || formData.password.length < 8) newErrors.password = 'Password must be at least 8 characters';
Â  Â  if (!formData.confirmPassword) newErrors.confirmPassword = 'Please confirm your password';
Â  Â  else if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = 'Passwords do not match';
Â  Â  
Â  Â  if (!formData.agreeToTerms) newErrors.agreeToTerms = 'You must agree to the terms and conditions';
Â  Â  setErrors(newErrors);
Â  Â  return Object.keys(newErrors).length === 0;
Â  };

Â  // âœ… The submit handler is correct, it calls the onSubmit prop.
Â  const handleSubmit = (e) => {
Â  Â  e.preventDefault();
Â  Â  if (validateForm()) {
Â  Â  Â  // Pass the correct fields to the parent handler
Â  Â  Â  onSubmit(formData);
Â  Â  }
Â  };

Â  return (
Â  Â  <form onSubmit={handleSubmit} className="space-y-6">
      
      {/* ðŸ”‘ NEW BLOCK: Role Selection & Conditional Specialty Input */}
      <div className="space-y-4">
        <label className="block text-sm font-medium text-foreground">
          I am registering as: <span className="text-destructive ml-1">*</span>
        </label>
        <div className="flex space-x-6">
          {/* Client Radio (Default) */}
          <div className="flex items-center">
            <input
              type="radio"
              id="role-client"
              name="role"
              value="client"
              checked={formData.role === 'client'}
              onChange={handleInputChange}
              className="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
            />
            <label htmlFor="role-client" className="ml-2 text-sm font-medium text-gray-700">Client (Default)</label>
          </div>
          {/* Coach Radio */}
          <div className="flex items-center">
            <input
              type="radio"
              id="role-coach"
              name="role"
              value="coach"
              checked={formData.role === 'coach'}
              onChange={handleInputChange}
              className="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
            />
            <label htmlFor="role-coach" className="ml-2 text-sm font-medium text-gray-700">Coach</label>
          </div>
        </div>

        {/* Conditional Specialty Input/Select for Coach */}
        {formData.role === 'coach' && (
          <div className="space-y-2">
            <label htmlFor="specialty-select-trigger" className="block text-sm font-medium text-foreground">
              Primary Coaching Specialty <span className="text-destructive ml-1">*</span>
            </label>
            
            {/* Specialty Dropdown */}
            <Select 
              value={selectedSpecialty} 
              onValueChange={handleSpecialtySelect}
            >
              <SelectTrigger id="specialty-select-trigger" className="w-full">
                <SelectValue placeholder="Select your primary specialty..." />
              </SelectTrigger>
              <SelectContent>
                {/* ðŸ”‘ FIX: Changed value from "" to a non-empty string to avoid Radix error */}
                <SelectItem value="disabled-placeholder" disabled>Select your primary specialty...</SelectItem> 
                {popularSpecialties.map((s) => (
                    <SelectItem key={s} value={s}>
                        {s}
                    </SelectItem>
                ))}
                <SelectItem value="other">Other (type below)</SelectItem>
              </SelectContent>
            </Select>
            
            {/* Display error if selectedSpecialty is NOT 'other' AND there is a validation error */}
            {errors.specialty && selectedSpecialty !== 'other' && !formData.specialty.trim() && (
                <p className="text-sm text-red-600 mt-1">{errors.specialty}</p>
            )}
            
            {/* Custom Input for 'Other' option */}
            {selectedSpecialty === 'other' && (
                <div className="pt-2">
                    <Input
                        type="text"
                        name="customSpecialtyInput" // Unique name for the input field
                        placeholder="Type your custom specialty here"
                        value={customSpecialty}
                        onChange={handleCustomSpecialtyChange}
                        // Show specialty error here if validation fails
                        error={errors.specialty} 
                        required
                        description="This will be set as your initial specialty."
                    />
                </div>
            )}
          </div>
        )}
      </div>
      {/* ðŸ”‘ END NEW BLOCK */}
      
Â  Â  Â  {/* ðŸ”‘ MODIFIED: Replaced Full Name with two side-by-side inputs */}
Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  label="First Name"
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  name="firstName"
Â  Â  Â  Â  Â  placeholder="Enter your first name"
Â  Â  Â  Â  Â  value={formData.firstName}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.firstName}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  label="Last Name"
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  name="lastName"
Â  Â  Â  Â  Â  placeholder="Enter your last name"
Â  Â  Â  Â  Â  value={formData.lastName}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.lastName}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  <Input
Â  Â  Â  Â  label="Email Address"
Â  Â  Â  Â  type="email"
Â  Â  Â  Â  name="email"
Â  Â  Â  Â  placeholder="Enter your email address"
Â  Â  Â  Â  value={formData.email}
Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  error={errors.email}
Â  Â  Â  Â  required
Â  Â  Â  />
Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Password"
Â  Â  Â  Â  Â  Â  type={showPassword ? "text" : "password"}
Â  Â  Â  Â  Â  Â  name="password"
Â  Â  Â  Â  Â  Â  placeholder="Create a strong password"
Â  Â  Â  Â  Â  Â  value={formData.password}
Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  error={errors.password}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute right-3 top-9 text-gray-500">
Â  Â  Â  Â  Â  Â  <Icon name={showPassword ? "EyeOff" : "Eye"} size={20} />
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {formData.password && (
Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  <div className="flex space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  {[1, 2, 3, 4, 5].map((level) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={level}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`h-2 flex-1 rounded-full ${level <= passwordStrength ? getPasswordStrengthColor(passwordStrength) : 'bg-gray-200'}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  Password strength: <span className="font-medium">{getPasswordStrengthText(passwordStrength)}</span>
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  <div className="relative">
Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  label="Confirm Password"
Â  Â  Â  Â  Â  type={showConfirmPassword ? "text" : "password"}
Â  Â  Â  Â  Â  name="confirmPassword"
Â  Â  Â  Â  Â  placeholder="Confirm your password"
Â  Â  Â  Â  Â  value={formData.confirmPassword}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.confirmPassword}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  Â  <button type="button" onClick={() => setShowConfirmPassword(!showConfirmPassword)} className="absolute right-3 top-9 text-gray-500">
Â  Â  Â  Â  Â  <Icon name={showConfirmPassword ? "EyeOff" : "Eye"} size={20} />
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  <Checkbox
Â  Â  Â  Â  Â  name="agreeToTerms"
Â  Â  Â  Â  Â  checked={formData.agreeToTerms}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.agreeToTerms}
Â  Â  Â  Â  Â  label={
Â  Â  Â  Â  Â  Â  <span className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  I agree to the{' '}
Â  Â  Â  Â  Â  Â  Â  <a 
Â  Â  Â  Â  Â  Â  Â  Â  Â  href="#" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleTermsClick} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-indigo-600 hover:underline font-medium"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Terms of Service
Â  Â  Â  Â  Â  Â  Â  </a>{' '}
Â  Â  Â  Â  Â  Â  Â  and{' '}
Â  Â  Â  Â  Â  Â  Â  <a 
Â  Â  Â  Â  Â  Â  Â  Â  Â  href="#" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handlePrivacyClick} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-indigo-600 hover:underline font-medium"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Privacy Policy
Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  Â  <Button type="submit" fullWidth loading={isLoading} disabled={isLoading}>
Â  Â  Â  Â  {isLoading ? 'Creating Account...' : 'Create Account'}
Â  Â  Â  </Button>
Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Already have an account?{' '}
Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  to="/login"
Â  Â  Â  Â  Â  Â  className="text-indigo-600 hover:underline font-medium"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Sign in here
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  </p>
Â  Â  Â  </div>
Â  Â  </form>
Â  );
};

export default RegistrationForm;