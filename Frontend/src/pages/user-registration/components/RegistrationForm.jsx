import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Input from '../../../components/ui/Input';
import Button from '../../../components/ui/Button';
import { Checkbox } from '../../../components/ui/Checkbox';
import Icon from '../../../components/AppIcon';

// âœ… The form now takes 'onSubmit' and 'isLoading' props from its parent
const RegistrationForm = ({ onSubmit, isLoading }) => {
Â  const [formData, setFormData] = useState({
Â  Â  // ðŸ”‘ MODIFIED: Split 'fullName' into 'firstName' and 'lastName'
Â  Â  firstName: '',
Â  Â  lastName: '',
Â  Â  email: '',
Â  Â  password: '',
Â  Â  confirmPassword: '',
Â  Â  agreeToTerms: false
Â  });

Â  const [errors, setErrors] = useState({});
Â  const [passwordStrength, setPasswordStrength] = useState(0);
Â  const [showPassword, setShowPassword] = useState(false);
Â  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

Â  const validatePassword = (password) => {
Â  Â  let strength = 0;
Â  Â  if (password?.length >= 8) strength++;
Â  Â  if (/[A-Z]/.test(password)) strength++;
Â  Â  if (/[a-z]/.test(password)) strength++;
Â  Â  if (/[0-9]/.test(password)) strength++;
Â  Â  if (/[^A-Za-z0-9]/.test(password)) strength++;
Â  Â  return strength;
Â  };

Â  const getPasswordStrengthText = (strength) => {
Â  Â  switch (strength) {
Â  Â  Â  case 0: case 1: return 'Weak';
Â  Â  Â  case 2: case 3: return 'Medium';
Â  Â  Â  case 4: case 5: return 'Strong';
Â  Â  Â  default: return '';
Â  Â  }
Â  };

Â  const getPasswordStrengthColor = (strength) => {
Â  Â  switch (strength) {
Â  Â  Â  case 0: case 1: return 'bg-red-500';
Â  Â  Â  case 2: case 3: return 'bg-yellow-500';
Â  Â  Â  case 4: case 5: return 'bg-green-500';
Â  Â  Â  default: return 'bg-gray-200';
Â  Â  }
Â  };

Â  const handleInputChange = (e) => {
Â  Â  const { name, value, type, checked } = e.target;
Â  Â  const inputValue = type === 'checkbox' ? checked : value;
Â  Â  setFormData(prev => ({ ...prev, [name]: inputValue }));
Â  Â  if (errors[name]) setErrors(prev => ({ ...prev, [name]: '' }));
Â  Â  if (name === 'password') setPasswordStrength(validatePassword(value));
Â  };

Â  const validateForm = () => {
Â  Â  const newErrors = {};
Â  Â  // ðŸ”‘ MODIFIED: Validate First Name
Â  Â  if (!formData.firstName.trim() || formData.firstName.trim().length < 2) 
        newErrors.firstName = 'First name must be at least 2 characters';
Â  Â  // ðŸ”‘ MODIFIED: Validate Last Name
Â  Â  if (!formData.lastName.trim() || formData.lastName.trim().length < 2) 
        newErrors.lastName = 'Last name must be at least 2 characters';
        
Â  Â  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
Â  Â  if (!formData.email) newErrors.email = 'Email is required';
Â  Â  else if (!emailRegex.test(formData.email)) newErrors.email = 'Please enter a valid email address';
Â  Â  
Â  Â  if (!formData.password || formData.password.length < 8) newErrors.password = 'Password must be at least 8 characters';
Â  Â  if (!formData.confirmPassword) newErrors.confirmPassword = 'Please confirm your password';
Â  Â  else if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = 'Passwords do not match';
Â  Â  
Â  Â  if (!formData.agreeToTerms) newErrors.agreeToTerms = 'You must agree to the terms and conditions';
Â  Â  setErrors(newErrors);
Â  Â  return Object.keys(newErrors).length === 0;
Â  };

Â  // âœ… The submit handler is correct, it calls the onSubmit prop.
Â  const handleSubmit = (e) => {
Â  Â  e.preventDefault();
Â  Â  if (validateForm()) {
Â  Â  Â  // Pass the correct fields to the parent handler
Â  Â  Â  onSubmit(formData);
Â  Â  }
Â  };

Â  return (
Â  Â  <form onSubmit={handleSubmit} className="space-y-6">
      {/* ðŸ”‘ MODIFIED: Replaced Full Name with two side-by-side inputs */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
Â  Â  Â  Â  Â  label="First Name"
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  name="firstName"
Â  Â  Â  Â  Â  placeholder="Enter your first name"
Â  Â  Â  Â  Â  value={formData.firstName}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.firstName}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
        <Input
Â  Â  Â  Â  Â  label="Last Name"
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  name="lastName"
Â  Â  Â  Â  Â  placeholder="Enter your last name"
Â  Â  Â  Â  Â  value={formData.lastName}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.lastName}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
      </div>
      
Â  Â  Â  <Input
Â  Â  Â  Â  label="Email Address"
Â  Â  Â  Â  type="email"
Â  Â  Â  Â  name="email"
Â  Â  Â  Â  placeholder="Enter your email address"
Â  Â  Â  Â  value={formData.email}
Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  error={errors.email}
Â  Â  Â  Â  required
Â  Â  Â  />
Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Password"
Â  Â  Â  Â  Â  Â  type={showPassword ? "text" : "password"}
Â  Â  Â  Â  Â  Â  name="password"
Â  Â  Â  Â  Â  Â  placeholder="Create a strong password"
Â  Â  Â  Â  Â  Â  value={formData.password}
Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  error={errors.password}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute right-3 top-9 text-gray-500">
Â  Â  Â  Â  Â  Â  <Icon name={showPassword ? "EyeOff" : "Eye"} size={20} />
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  {formData.password && (
Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  <div className="flex space-x-1">
Â  Â  Â  Â  Â  Â  Â  {[1, 2, 3, 4, 5].map((level) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={level}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`h-2 flex-1 rounded-full ${level <= passwordStrength ? getPasswordStrengthColor(passwordStrength) : 'bg-gray-200'}`}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Password strength: <span className="font-medium">{getPasswordStrengthText(passwordStrength)}</span>
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  Â  <div className="relative">
Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  label="Confirm Password"
Â  Â  Â  Â  Â  type={showConfirmPassword ? "text" : "password"}
Â  Â  Â  Â  Â  name="confirmPassword"
Â  Â  Â  Â  Â  placeholder="Confirm your password"
Â  Â  Â  Â  Â  value={formData.confirmPassword}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.confirmPassword}
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  Â  <button type="button" onClick={() => setShowConfirmPassword(!showConfirmPassword)} className="absolute right-3 top-9 text-gray-500">
Â  Â  Â  Â  Â  <Icon name={showConfirmPassword ? "EyeOff" : "Eye"} size={20} />
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  <Checkbox
Â  Â  Â  Â  Â  name="agreeToTerms"
Â  Â  Â  Â  Â  checked={formData.agreeToTerms}
Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  error={errors.agreeToTerms}
Â  Â  Â  Â  Â  label={
Â  Â  Â  Â  Â  Â  <span className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  I agree to the{' '}
Â  Â  Â  Â  Â  Â  Â  <Link to="/terms" className="text-indigo-600 hover:underline font-medium">Terms of Service</Link>{' '}
Â  Â  Â  Â  Â  Â  Â  and{' '}
Â  Â  Â  Â  Â  Â  Â  <Link to="/privacy" className="text-indigo-600 hover:underline font-medium">Privacy Policy</Link>
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  required
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  Â  <Button type="submit" fullWidth loading={isLoading} disabled={isLoading}>
Â  Â  Â  Â  {isLoading ? 'Creating Account...' : 'Create Account'}
Â  Â  Â  </Button>
Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Already have an account?{' '}
Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  to="/login"
Â  Â  Â  Â  Â  Â  className="text-indigo-600 hover:underline font-medium"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Sign in here
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  </p>
Â  Â  Â  </div>
Â  Â  </form>
Â  );
};

export default RegistrationForm;