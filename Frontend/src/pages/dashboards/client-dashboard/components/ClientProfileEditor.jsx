import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Save, AlertTriangle, Upload, X, Camera } from 'lucide-react';
// CORRECTED IMPORTS USING @/ ALIAS
import Button from '@/components/ui/Button'; 
import Input from '@/components/ui/Input';
import { cn } from '@/utils/cn'; 
// ðŸŒŸ NEW: Import the reusable Demographic component
import DemographicsFormSection from '@/pages/dashboards/shared/DemographicsFormSection'; 


const ClientProfileEditor = () => {
Â  const [isSaving, setIsSaving] = useState(false);
Â  const [profileData, setProfileData] = useState({});
Â  const [initialData, setInitialData] = useState({});
Â  const [unsavedChanges, setUnsavedChanges] = useState(false);

Â  // ðŸŒŸ NEW STATE: To hold the actual file object before upload
Â  const [imageFile, setImageFile] = useState(null); 
Â  
Â  const fileInputRef = useRef(null);
Â  const [dragActive, setDragActive] = useState(false);
Â  const [previewUrl, setPreviewUrl] = useState(null);

Â  // --- Data Fetching Logic (UNCHANGED and correctly merging) ---
Â  useEffect(() => {
Â  Â  const fetchProfileData = async () => {
Â  Â  Â  const token = localStorage.getItem('accessToken');
Â  Â  Â  if (!token) {
Â  Â  Â  Â  console.error("Authentication Error: No token found. Please log in.");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  try {
Â  Â  Â  Â  const response = await fetch('http://localhost:4028/api/auth/me', {
Â  Â  Â  Â  Â  headers: { 'Authorization': `Bearer ${token}`, },
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  throw new Error('Failed to fetch user data from the server.');
Â  Â  Â  Â  }

Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  
Â  Â  Â  Â  // Correctly merging ClientProfile into the top level for form use
Â  Â  Â  Â  const userData = {
Â  Â  Â  Â  Â  Â  ...data.user,
Â  Â  Â  Â  Â  Â  ...data.user.ClientProfile 
Â  Â  Â  Â  };

Â  Â  Â  Â  setProfileData(userData); 
Â  Â  Â  Â  setInitialData(userData);
        // This sets the image preview using the URL path from the database
Â  Â  Â  Â  setPreviewUrl(userData.profilePicture); 

Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error fetching profile data:", error);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchProfileData();
Â  }, []); 

Â  
Â  // Detects if any changes have been made to the form (UNCHANGED)
Â  useEffect(() => {
Â  Â  const hasUnsavedChanges = JSON.stringify(profileData) !== JSON.stringify(initialData) || imageFile !== null;
Â  Â  setUnsavedChanges(hasUnsavedChanges);
Â  }, [profileData, initialData, imageFile]);

Â  // Updates the state in real-time as you type in a form field (UNCHANGED)
Â  const updateData = useCallback((newData) => {
Â  Â  setProfileData(prev => ({ ...prev, ...newData }));
Â  }, []);
Â  
Â  // ðŸŒŸ NEW: Universal change handler for inputs and selects (UNCHANGED)
Â  const handleChange = useCallback((e) => {
Â  Â  const { name, value } = e.target;
Â  Â  updateData({ [name]: value });
Â  }, [updateData]);


Â  // Handles file preview and saves the file object (UNCHANGED)
Â  const handleFileUpload = (file) => {
Â  Â  if (file && file?.type?.startsWith('image/')) {
Â  Â  Â  const reader = new FileReader();
Â  Â  Â  reader.onload = (e) => {
Â  Â  Â  Â  setPreviewUrl(e.target.result); // Show preview using Base64
Â  Â  Â  };
Â  Â  Â  reader.readAsDataURL(file);

Â  Â  Â  // Save the actual File object and clear temporary Base64
Â  Â  Â  setImageFile(file); 
Â  Â  Â  setUnsavedChanges(true); 
Â  Â  }
Â  };

Â  // Two-step Save function (API URL fixed in previous step)
Â  const handleSave = async () => {
Â  Â  setIsSaving(true);
Â  Â  const token = localStorage.getItem('accessToken');
Â  Â  let finalProfileData = { ...profileData };

Â  Â  if (!token) {
Â  Â  Â  alert("You are not logged in. Please log in to save your profile.");
Â  Â  Â  setIsSaving(false);
Â  Â  Â  return;
Â  Â  }

Â  Â  // --- STEP 1: Upload File if a new one is pending ---
Â  Â  if (imageFile) {
Â  Â  Â  Â  const formData = new FormData();
Â  Â  Â  Â  formData.append('profilePicture', imageFile);
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // This POST call saves the file to the 'uploads' folder
Â  Â  Â  Â  Â  Â  const uploadResponse = await fetch('http://localhost:4028/api/client/profile/upload-picture', {
Â  Â  Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'Authorization': `Bearer ${token}`,
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  body: formData,
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  const uploadData = await uploadResponse.json();
Â  Â  Â  Â  Â  Â  if (!uploadResponse.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  throw new Error(uploadData.error || 'File upload failed.');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Store the public URL path returned by the backend
Â  Â  Â  Â  Â  Â  finalProfileData.profilePicture = uploadData.profilePicture;

Â  Â  Â  Â  } catch (uploadError) {
Â  Â  Â  Â  Â  Â  console.error('Profile picture upload failed:', uploadError);
Â  Â  Â  Â  Â  Â  alert(`Error uploading picture: ${uploadError.message}`);
Â  Â  Â  Â  Â  Â  setIsSaving(false);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  } else if (profileData.profilePicture === null) {
Â  Â  Â  Â  finalProfileData.profilePicture = null;
Â  Â  }

Â  Â  // --- STEP 2: Save the Profile Data (with the new file path) ---
Â  Â  try {
Â  Â  Â  // This PUT call is configured to hit the new /api/client/profile endpoint
Â  Â  Â  const response = await fetch('http://localhost:4028/api/client/profile', {
Â  Â  Â  Â  method: 'PUT',
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  Â  Â  'Authorization': `Bearer ${token}`,
Â  Â  Â  Â  },
Â  Â  Â  Â  body: JSON.stringify(finalProfileData),
Â  Â  Â  });

Â  Â  Â  const data = await response.json();

Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  throw new Error(data.error || 'An unknown error occurred during saving.');
Â  Â  Â  }

Â  Â  Â  alert('Profile saved successfully!');
Â  Â  Â  
      // ðŸŒŸðŸŒŸðŸŒŸ CRITICAL FIX APPLIED HERE ðŸŒŸðŸŒŸðŸŒŸ
      // Merge the nested response data back into the flat state structure
      const savedUserData = {
        ...data.user,
        ...data.user.ClientProfile // This flattens demographics and ensures persistence
      };
Â  Â  Â  
Â  Â  Â  setProfileData(savedUserData);
Â  Â  Â  setInitialData(savedUserData);
Â  Â  Â  setImageFile(null); // Clears the temporary file object
      // Also update the preview URL using the newly saved data
      setPreviewUrl(savedUserData.profilePicture); 

Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to save profile:', error);
Â  Â  Â  alert(`Error saving profile: ${error.message}`);
Â  Â  } finally {
Â  Â  Â  setIsSaving(false);
Â  Â  }
Â  };
Â  
Â  // Helper functions for drag-and-drop 
Â  const handleDrop = (e) => { e.preventDefault(); setDragActive(false); e.dataTransfer.files[0] && handleFileUpload(e.dataTransfer.files[0]); };
Â  const handleDragOver = (e) => { e.preventDefault(); setDragActive(true); };
Â  const handleDragLeave = (e) => { e.preventDefault(); setDragActive(false); };
Â  const removeProfilePicture = () => { 
Â  Â  setPreviewUrl(null); 
Â  Â  setImageFile(null); 
Â  Â  updateData({ profilePicture: null }); 
Â  Â  setUnsavedChanges(true); 
Â  };


Â  return (
Â  Â  <div className="max-w-4xl mx-auto py-10">
Â  Â  Â  <div className="mb-8">
Â  Â  Â  Â  <h1 className="text-3xl font-bold text-gray-800">Edit Your Profile</h1>
Â  Â  Â  Â  <p className="text-gray-600 mt-2">
Â  Â  Â  Â  Â  Keep your profile updated to get the best matches with coaches.
Â  Â  Â  Â  </p>
Â  Â  Â  Â  {profileData.profilePicture && (
            <img 
                src={`http://localhost:4028${profileData.profilePicture}`} 
                alt="Current Profile Picture" 
                className="mt-4 w-16 h-16 rounded-full object-cover shadow" 
            />
        )}
Â  Â  Â  </div>

Â  Â  Â  <main className="space-y-8 bg-white shadow-lg rounded-xl p-8">
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Profile Picture Upload Section */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Profile Picture</h3>
Â  Â  Â  Â  Â  <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center">
Â  Â  Â  Â  Â  Â  Â  Â  {/* Displays either the URL path or the local Base64 preview */}
Â  Â  Â  Â  Â  Â  Â  Â  {previewUrl ? <img src={previewUrl.startsWith('/') ? `http://localhost:4028${previewUrl}` : previewUrl} alt="Profile preview" className="w-full h-full object-cover" /> : <Camera className="w-8 h-8 text-gray-400" />}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  {previewUrl && <button onClick={removeProfilePicture} className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1"><X className="w-4 h-4" /></button>}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  <div onDrop={handleDrop} onDragOver={handleDragOver} onDragLeave={handleDragLeave} className={cn("border-2 border-dashed rounded-lg p-6 text-center", dragActive ? "border-blue-400 bg-blue-50" : "border-gray-300")}>
Â  Â  Â  Â  Â  Â  Â  Â  <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600"><span className="font-medium">Click to upload</span> or drag and drop</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="outline" size="sm" onClick={() => fileInputRef.current && fileInputRef.current.click()} className="mt-4">Choose File</Button>
Â  Â  Â  Â  Â  Â  Â  Â  <input ref={fileInputRef} type="file" accept="image/*" onChange={(e) => e.target.files && handleFileUpload(e.target.files[0])} className="hidden" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Personal Information Form */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Personal Details</h3>
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
Â  Â  Â  Â  Â  Â  Â  <Input label="First Name" required value={profileData.firstName || ''} onChange={(e) => updateData({ firstName: e.target.value })} />
Â  Â  Â  Â  Â  Â  Â  <Input label="Last Name" required value={profileData.lastName || ''} onChange={(e) => updateData({ lastName: e.target.value })} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Contact Information */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Contact Information</h3>
Â  Â  Â  Â  Â  <Input label="Email Address" type="email" required value={profileData.email || ''} onChange={(e) => updateData({ email: e.target.value })} disabled={true} description="Email cannot be changed." />
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Phone Number (Optional)"
Â  Â  Â  Â  Â  Â  type="tel"
Â  Â  Â  Â  Â  Â  value={profileData.phone || ''}
Â  Â  Â  Â  Â  Â  onChange={(e) => updateData({ phone: e.target.value })}
Â  Â  Â  Â  Â  Â  placeholder="+1 (555) 123-4567"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* DEMOGRAPHIC FIELDS SECTION (Integrated Component) */}
Â  Â  Â  Â  <DemographicsFormSection 
Â  Â  Â  Â  Â  Â  formData={profileData} 
Â  Â  Â  Â  Â  Â  handleChange={handleChange} 
Â  Â  Â  Â  />
Â  Â  Â  </main>

Â  Â  Â  {/* The Save button footer */}
Â  Â  Â  <footer className="mt-8 pt-6 border-t border-gray-200 flex items-center justify-end space-x-4">
Â  Â  Â  Â  {unsavedChanges && <div className="flex items-center text-sm text-yellow-600"><AlertTriangle className="w-4 h-4 mr-2" />You have unsaved changes.</div>}
Â  Â  Â  Â  <Button onClick={handleSave} disabled={isSaving || !unsavedChanges} size="lg">
Â  Â  Â  Â  Â  <Save className="w-5 h-5 mr-2" />{isSaving ? 'Saving...' : 'Save Changes'}
Â  Â  Â  Â  </Button>
Â  Â  Â  </footer>
Â  Â  </div>
Â  );
};

export default ClientProfileEditor;