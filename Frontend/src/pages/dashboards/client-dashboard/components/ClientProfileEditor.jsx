import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Save, AlertTriangle, Upload, X, Camera } from 'lucide-react';
// CORRECTED IMPORTS USING @/ ALIAS
import Button from '@/components/ui/Button'; 
import Input from '@/components/ui/Input';
import { cn } from '@/utils/cn'; 
// ðŸŒŸ NEW: Import the reusable Demographic component
import DemographicsFormSection from '@/pages/dashboards/shared/DemographicsFormSection'; 
// ðŸŒŸ NEW: Import API functions and DELETE function
import { getMe, updateClientProfile, uploadClientProfilePicture, deleteClientProfilePicture } from '@/auth/authApi'; 
import { toast } from 'sonner'; 

const API_BASE_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:4028';

const ClientProfileEditor = () => {
Â  const [isSaving, setIsSaving] = useState(false);
Â  const [profileData, setProfileData] = useState({});
Â  const [initialData, setInitialData] = useState({});
Â  const [unsavedChanges, setUnsavedChanges] = useState(false);

Â  // ðŸŒŸ NEW STATE: To hold the actual file object before upload
Â  const [imageFile, setImageFile] = useState(null); 
Â  
Â  const fileInputRef = useRef(null);
Â  const [dragActive, setDragActive] = useState(false);
Â  const [previewUrl, setPreviewUrl] = useState(null);

Â  // --- Data Fetching Logic ---
Â  useEffect(() => {
Â  Â  const fetchProfileData = async () => {
Â  Â  Â  const token = localStorage.getItem('accessToken');
Â  Â  Â  if (!token) {
Â  Â  Â  Â  toast.error("Authentication Error: Please log in.");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  try {
Â  Â  Â  Â  const response = await getMe();
Â  Â  Â  Â  const data = response.data;
Â  Â  Â  Â  
Â  Â  Â  Â  const userData = {
Â  Â  Â  Â  Â  Â  ...data.user,
Â  Â  Â  Â  Â  Â  ...data.user.ClientProfile 
Â  Â  Â  Â  };

        // ðŸ”‘ FIX 1: Set +91 default if phone is empty or null
        if (!userData.phone || userData.phone === '') {
            userData.phone = '+91';
        }

Â  Â  Â  Â  setProfileData(userData); 
Â  Â  Â  Â  setInitialData(userData);
Â  Â  Â  Â  setPreviewUrl(userData.profilePicture); 

Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error fetching profile data:", error);
Â  Â  Â  Â  toast.error(error.message || "Failed to fetch profile data from server.");
Â  Â  Â  }
Â  Â  };

Â  Â  fetchProfileData();
Â  }, []); 

Â  
Â  // Detects if any changes have been made to the form
Â  useEffect(() => {
Â  Â  const hasUnsavedChanges = JSON.stringify(profileData) !== JSON.stringify(initialData) || imageFile !== null;
Â  Â  setUnsavedChanges(hasUnsavedChanges);
Â  }, [profileData, initialData, imageFile]);

Â  // Updates the state in real-time as you type in a form field
Â  const updateData = useCallback((newData) => {
Â  Â  setProfileData(prev => ({ ...prev, ...newData }));
Â  }, []);
Â  
Â  // Universal change handler for inputs and selects
Â  const handleChange = useCallback((e) => {
Â  Â  const { name, value } = e.target;
    
    // Enforce +91 prefix if the user deletes it entirely
    if (name === 'phone' && value.length > 0 && !value.startsWith('+') && !value.startsWith('(')) {
        updateData({ [name]: '+' + value.replace(/[^0-9]/g, '') });
    } else {
        updateData({ [name]: value });
    }
Â  }, [updateData]);


Â  // Handles file preview and saves the file object
Â  const handleFileUpload = (file) => {
Â  Â  if (file && file?.type?.startsWith('image/')) {
Â  Â  Â  const reader = new FileReader();
Â  Â  Â  reader.onload = (e) => {
Â  Â  Â  Â  setPreviewUrl(e.target.result); // Show preview using Base64
Â  Â  Â  };
Â  Â  Â  reader.readAsDataURL(file);

Â  Â  Â  setImageFile(file); 
Â  Â  Â  setUnsavedChanges(true); 
Â  Â  }
Â  };

Â  // ðŸ”‘ FIX 2: Implement dedicated API call for photo deletion
Â  const removeProfilePicture = async () => { 
Â  Â  if (!window.confirm("Are you sure you want to permanently delete your profile picture? This cannot be undone.")) {
Â  Â  Â  return;
Â  Â  }
    
    // If the image is already null and there's no file pending, just clear local state
    if (!profileData.profilePicture && !imageFile) {
        return;
    }
    
    try {
        // Only call API if a URL exists (i.e., it's saved in the DB)
        if (profileData.profilePicture) {
            await deleteClientProfilePicture(); 
            toast.success("Profile picture successfully deleted from server.");
        }

        setPreviewUrl(null); 
        setImageFile(null); // Clear the temporary file object
        updateData({ profilePicture: null }); // Set DB path to null
        setUnsavedChanges(true); 
    } catch (error) {
        console.error("Failed to delete profile picture:", error);
        toast.error(error.response?.data?.message || "Failed to delete profile picture.");
    }
Â  };


Â  // Two-step Save function
Â  const handleSave = async () => {
Â  Â  setIsSaving(true);
Â  Â  const token = localStorage.getItem('accessToken');
Â  Â  let finalProfileData = { ...profileData };

Â  Â  if (!token) {
Â  Â  Â  toast.error("You are not logged in. Please log in to save your profile.");
Â  Â  Â  setIsSaving(false);
Â  Â  Â  return;
Â  Â  }

Â  Â  // --- STEP 1: Upload File if a new one is pending ---
Â  Â  if (imageFile) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const uploadResponse = await uploadClientProfilePicture(imageFile);
Â  Â  Â  Â  Â  Â  const uploadData = uploadResponse.data; 
Â  Â  Â  Â  Â  Â  finalProfileData.profilePicture = uploadData.profilePicture;
Â  Â  Â  Â  } catch (uploadError) {
Â  Â  Â  Â  Â  Â  console.error('Profile picture upload failed:', uploadError);
Â  Â  Â  Â  Â  Â  toast.error(`Error uploading picture: ${uploadError.message}`);
Â  Â  Â  Â  Â  Â  setIsSaving(false);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  } else if (profileData.profilePicture === null && initialData.profilePicture !== null) {
Â  Â  Â  Â  // This case is handled by the dedicated removeProfilePicture, but kept for safety.
Â  Â  Â  Â  finalProfileData.profilePicture = null;
Â  Â  }

Â  Â  // --- STEP 2: Save the Profile Data ---
Â  Â  try {
Â  Â  Â  const response = await updateClientProfile(finalProfileData);
Â  Â  Â  
Â  Â  Â  const data = response.data; 

Â  Â  Â  toast.success('Profile saved successfully! ðŸŽ‰');
Â  Â  Â  
Â  Â  Â  const savedUserData = {
Â  Â  Â  Â  ...data.user,
Â  Â  Â  Â  ...data.user.ClientProfile 
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  setProfileData(savedUserData);
Â  Â  Â  setInitialData(savedUserData);
Â  Â  Â  setImageFile(null); 
Â  Â  Â  setPreviewUrl(savedUserData.profilePicture); 

Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to save profile:', error);
Â  Â  Â  toast.error(`Error saving profile: ${error.response?.data?.error || error.message}`);
Â  Â  } finally {
Â  Â  Â  setIsSaving(false);
Â  Â  }
Â  };
Â  
Â  // Helper functions for drag-and-drop 
Â  const handleDrop = (e) => { e.preventDefault(); setDragActive(false); e.dataTransfer.files[0] && handleFileUpload(e.dataTransfer.files[0]); };
Â  const handleDragOver = (e) => { e.preventDefault(); setDragActive(true); };
Â  const handleDragLeave = (e) => { e.preventDefault(); setDragActive(false); };


Â  // ðŸ”‘ FIX 3: Calculate the maximum allowed date (Today)
Â  const today = new Date().toISOString().split('T')[0];

Â  return (
Â  Â  <div className="max-w-4xl mx-auto py-10">
Â  Â  Â  <div className="mb-8">
Â  Â  Â  Â  <h1 className="text-3xl font-bold text-gray-800">Edit Your Profile</h1>
Â  Â  Â  Â  <p className="text-gray-600 mt-2">
Â  Â  Â  Â  Â  Keep your profile updated to get the best matches with coaches.
Â  Â  Â  Â  </p>
Â  Â  Â  </div>

Â  Â  Â  <main className="space-y-8 bg-white shadow-lg rounded-xl p-8">
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Profile Picture Upload Section */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Profile Picture</h3>
Â  Â  Â  Â  Â  <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ”‘ FIX 4: Image fetching fix for production */}
Â  Â  Â  Â  Â  Â  Â  Â  {previewUrl 
                    ? <img 
                        src={previewUrl?.startsWith('/') ? `${API_BASE_URL}${previewUrl}` : previewUrl} 
                        alt="Profile preview" 
                        className="w-full h-full object-cover" 
                      /> 
                    : <Camera className="w-8 h-8 text-gray-400" />}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  {previewUrl && <button onClick={removeProfilePicture} className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1"><X className="w-4 h-4" /></button>}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  <div onDrop={handleDrop} onDragOver={handleDragOver} onDragLeave={handleDragLeave} className={cn("border-2 border-dashed rounded-lg p-6 text-center", dragActive ? "border-blue-400 bg-blue-50" : "border-gray-300")}>
Â  Â  Â  Â  Â  Â  Â  Â  <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600"><span className="font-medium">Click to upload</span> or drag and drop</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="outline" size="sm" onClick={() => fileInputRef.current && fileInputRef.current.click()} className="mt-4">Choose File</Button>
Â  Â  Â  Â  Â  Â  Â  Â  <input ref={fileInputRef} type="file" accept="image/*" onChange={(e) => e.target.files && handleFileUpload(e.target.files[0])} className="hidden" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Personal Information Form */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Personal Details</h3>
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
Â  Â  Â  Â  Â  Â  Â  <Input label="First Name" required value={profileData.firstName || ''} onChange={(e) => updateData({ firstName: e.target.value })} />
Â  Â  Â  Â  Â  Â  Â  <Input label="Last Name" required value={profileData.lastName || ''} onChange={(e) => updateData({ lastName: e.target.value })} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Contact Information */}
Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900">Contact Information</h3>
Â  Â  Â  Â  Â  <Input label="Email Address" type="email" required value={profileData.email || ''} onChange={(e) => updateData({ email: e.target.value })} disabled={true} description="Email cannot be changed." />
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Phone Number (Default: +91)"
Â  Â  Â  Â  Â  Â  type="tel"
            name="phone"
Â  Â  Â  Â  Â  Â  value={profileData.phone || ''}
Â  Â  Â  Â  Â  Â  onChange={handleChange} // Use the consolidated handleChange
Â  Â  Â  Â  Â  Â  placeholder="+91 98765 43210"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* ðŸŒŸ DEMOGRAPHIC FIELDS SECTION (Integrated Component) */}
Â  Â  Â  Â  <DemographicsFormSection 
Â  Â  Â  Â  Â  Â  formData={profileData} 
Â  Â  Â  Â  Â  Â  handleChange={handleChange} 
            // ðŸ”‘ FIX 5: Pass max date to prevent future dates in Date of Birth selector
            maxDate={today}
Â  Â  Â  Â  />
Â  Â  Â  </main>

Â  Â  Â  {/* The Save button footer */}
Â  Â  Â  <footer className="mt-8 pt-6 border-t border-gray-200 flex items-center justify-end space-x-4">
Â  Â  Â  Â  {unsavedChanges && <div className="flex items-center text-sm text-yellow-600"><AlertTriangle className="w-4 h-4 mr-2" />You have unsaved changes.</div>}
Â  Â  Â  Â  <Button onClick={handleSave} disabled={isSaving || !unsavedChanges} size="lg">
Â  Â  Â  Â  Â  <Save className="w-5 h-5 mr-2" />{isSaving ? 'Saving...' : 'Save Changes'}
Â  Â  Â  Â  </Button>
Â  Â  Â  </footer>
Â  Â  </div>
Â  );
};

export default ClientProfileEditor;