// Frontend/src/pages/dashboards/coach-dashboard/components/CoachOverview.jsx

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom'; // ðŸ‘ˆ 1. Import useNavigate
import {
Â  Users,
Â  Calendar,
Â  DollarSign,
Â  TrendingUp,
Â  Star,
Â  Target,
Â  AlertCircle,
Â  MessageSquare // ðŸ‘ˆ 2. Import MessageSquare
} from 'lucide-react';
import { useAuth } from '../../../../auth/AuthContext';
import { getCoachDashboardOverview } from '../../../../auth/authApi';

// Helper to format time (e.g., 10:00 AM)
const formatTime = (timeString) => {
Â  if (!timeString || typeof timeString !== 'string') return '';
Â  // Create a date object just to parse the time string
Â  const [hours, minutes] = timeString.split(':');
Â  if (hours === undefined || minutes === undefined) return timeString; // Return original if format is wrong

Â  const date = new Date();
Â  date.setHours(parseInt(hours, 10));
Â  date.setMinutes(parseInt(minutes, 10));

Â  return date.toLocaleTimeString('en-US', {
Â  Â  hour: '2-digit',
Â  Â  minute: '2-digit',
Â  Â  hour12: true
Â  });
};

// ðŸ‘ˆ 3. Add a new helper to format date
// Helper to format date (e.g., Oct 21, 2025)
const formatDate = (dateString) => {
Â  if (!dateString) return '';
Â  // The date from the DB should be correct (YYYY-MM-DD), use UTC methods to avoid timezone shift
Â  const date = new Date(dateString);
Â  const year = date.getUTCFullYear();
Â  const month = date.getUTCMonth(); // 0-indexed
Â  const day = date.getUTCDate();

Â  const tempDate = new Date(Date.UTC(year, month, day)); // Create UTC date

Â  return tempDate.toLocaleDateString('en-US', {
Â  Â  year: 'numeric',
Â  Â  month: 'short',
Â  Â  day: 'numeric',
Â  Â  timeZone: 'UTC' // Specify UTC to prevent local timezone conversion in formatting
Â  });
};


const CoachOverview = () => {
Â  const { user } = useAuth();
Â  const navigate = useNavigate(); // ðŸ‘ˆ 4. Initialize useNavigate
Â  const [stats, setStats] = useState(null);
Â  const [upcomingSessions, setUpcomingSessions] = useState([]); // ðŸ‘ˆ 5. Rename state
Â  const [isLoading, setIsLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  // Fetch data from the new backend endpoint
Â  const fetchOverview = useCallback(async () => {
Â  Â  setIsLoading(true);
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  const response = await getCoachDashboardOverview();
Â  Â  Â  setStats(response.data.stats);
Â  Â  Â  setUpcomingSessions(response.data.upcomingSessions); // ðŸ‘ˆ 6. Set upcomingSessions
Â  Â  } catch (err) {
Â  Â  Â  setError(err.message || 'Failed to fetch overview data');
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  }, []);

Â  useEffect(() => {
Â  Â  fetchOverview();
Â  }, [fetchOverview]);

Â  // === Loading and Error States ===
Â  if (isLoading) {
Â  Â  return (
Â  Â  Â  <div className="flex justify-center items-center h-64">
Â  Â  Â  Â  <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-purple-600"></div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg" role="alert">
Â  Â  Â  Â  <strong className="font-bold"><AlertCircle className="inline-block mr-2" />Error: </strong>
Â  Â  Â  Â  <span className="block sm:inline">{error}</span>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  // === Dynamic Stats Cards ===
Â  const statCards = [
Â  Â  {
Â  Â  Â  title: "Active Clients",
Â  Â  Â  value: stats?.activeClientsCount ?? 0,
Â  Â  Â  change: "From confirmed bookings",
Â  Â  Â  changeType: "neutral",
Â  Â  Â  icon: Users,
Â  Â  Â  color: "bg-blue-500"
Â  Â  },
Â  Â  {
Â  Â  Â  title: "Monthly Revenue",
Â  Â  Â  value: stats?.monthlyRevenue ?? "N/A",
Â  Â  Â  change: "Feature coming soon",
Â  Â  Â  changeType: "neutral",
Â  Â  Â  icon: DollarSign,
Â  Â  Â  color: "bg-green-500"
Â  Â  },
Â  Â  {
Â  Â  Â  title: "Upcoming Sessions", // ðŸ‘ˆ 7. Rename stat card
Â  Â  Â  value: stats?.sessionsThisWeekCount ?? 0,
Â  Â  Â  change: "In the next 7 days", // ðŸ‘ˆ 8. Update description
Â  Â  Â  changeType: "neutral",
Â  Â  Â  icon: Calendar,
Â  Â  Â  color: "bg-purple-500"
Â  Â  },
Â  Â  {
Â  Â  Â  title: "Average Rating",
Â  Â  Â  value: stats?.averageRating ?? "N/A",
Â  Â  Â  change: "Feature coming soon",
Â  Â  Â  changeType: "neutral",
Â  Â  Â  icon: Star,
Â  Â  Â  color: "bg-yellow-500"
Â  Â  }
Â  ];

Â  return (
Â  Â  <div className="space-y-6">
Â  Â  Â  {/* Welcome Section */}
Â  Â  Â  <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl p-6 text-white">
Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-2">Welcome back, {user?.firstName || 'Coach'}!</h2>
Â  Â  Â  Â  <p className="text-purple-100">
Â  Â  Â  Â  Â  You have {stats?.sessionsThisWeekCount ?? 0} session(s) scheduled in the next 7 days. {/* ðŸ‘ˆ Use count from stats */}
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/profile')}
Â  Â  Â  Â  Â  Â  className="mt-3 inline-flex items-center text-sm font-medium text-white bg-white/20 hover:bg-white/30 px-3 py-1.5 rounded-lg transition-colors"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Complete Your Profile
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {/* Stats Grid */}
Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
Â  Â  Â  Â  {statCards.map((stat, index) => {
Â  Â  Â  Â  Â  const Icon = stat.icon;
Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div key={index} className="bg-white p-6 rounded-xl border border-gray-200">
Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-gray-600 mb-1">{stat.title}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-gray-900 mb-2">{stat.value}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-sm ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stat.changeType === 'positive' ? 'text-green-600' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stat.changeType === 'negative' ? 'text-red-600' : 'text-gray-500'
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {stat.change}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className={`w-12 h-12 ${stat.color} rounded-lg flex items-center justify-center`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Icon size={24} className="text-white" />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  })}
Â  Â  Â  </div>

Â  Â  Â  {/* Main Content Grid */}
Â  Â  Â  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
Â  Â  Â  Â  {/* Upcoming Sessions List */}
Â  Â  Â  Â  <div className="lg:col-span-2 bg-white rounded-xl border border-gray-200 p-6">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-4">
Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold">Upcoming Sessions</h3> {/* ðŸ‘ˆ Title */}
Â  Â  Â  Â  Â  Â  {/* Link 'View All' to session management page */}
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/sessions')}
Â  Â  Â  Â  Â  Â  Â  className="text-blue-600 hover:text-blue-700 text-sm font-medium"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  View All Sessions
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="space-y-3 max-h-96 overflow-y-auto"> {/* Scroll */}
Â  Â  Â  Â  Â  Â  {upcomingSessions.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  upcomingSessions.map((session) => ( // Loop over created sessions
Â  Â  Â  Â  Â  Â  Â  Â  <div key={session.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Session Info */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center"> {/* Changed color */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Calendar size={20} className="text-purple-600" /> {/* Changed icon */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Show Session Title */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-medium">{session.title || 'Session'}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {/* Show Client name if available, otherwise 'Not Booked' or similar */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {session.client ? `${session.client.firstName} ${session.client.lastName}` : 'Availability'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Date and Time */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-right">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-medium">{formatDate(session.date)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">{formatTime(session.startTime)} ({session.duration} min)</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ›‘ MODIFIED: Action Button - KEEP ONLY EDIT */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Keep Edit button (or link to edit session page) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate(`/dashboard/coach/sessions?edit=${session.id}`)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border border-gray-300 text-gray-600 px-3 py-1 rounded text-sm hover:bg-gray-50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Edit
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 text-center py-4">No upcoming sessions created.</p>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Recent Activities */}
Â  Â  Â  Â  <div className="bg-white rounded-xl border border-gray-200 p-6">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-4">Recent Activities</h3>

Â  Â  Â  Â  Â  <div className="flex flex-col items-center justify-center h-full min-h-[150px] text-gray-500">
Â  Â  Â  Â  Â  Â  <Target size={32} className="mb-2" />
Â  Â  Â  Â  Â  Â  <p className="text-sm text-center">Recent activity feed<br/>is coming soon.</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Quick Actions */}
Â  Â  Â  <div className="bg-white rounded-xl border border-gray-200 p-6">
Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>

Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/clients')}
Â  Â  Â  Â  Â  className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
Â  Â  Â  Â  Â  Â  <Users size={24} className="text-blue-600 mb-2" />
Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">Add Client</span>
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  {/* Navigate to Session Management */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/sessions')}
Â  Â  Â  Â  Â  Â  className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Calendar size={24} className="text-green-600 mb-2" />
Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">Manage Sessions</span>
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  {/* Navigate to Communication */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/communication')}
Â  Â  Â  Â  Â  Â  className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <MessageSquare size={24} className="text-purple-600 mb-2" />
Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">Send Message</span>
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  {/* Navigate to Analytics */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard/coach/analytics')}
Â  Â  Â  Â  Â  Â  className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <TrendingUp size={24} className="text-orange-600 mb-2" />
Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">View Analytics</span>
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default CoachOverview;