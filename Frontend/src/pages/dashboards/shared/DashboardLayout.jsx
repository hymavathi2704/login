import React, { useState, useEffect, useRef } from 'react';
import { LogOut, Menu, Bell, User, Settings, X, ChevronDown, PanelLeft } from 'lucide-react';
import { useAuth } from '@/auth/AuthContext';
import BreadcrumbNavigation, { BreadcrumbProvider } from '@/components/ui/BreadcrumbNavigation';
import { cn } from '@/utils/cn';

// Load backend URL from .env (fallback to localhost:4028)
const API_BASE_URL = import.meta.env.VITE_BACKEND_URL || "http://localhost:4028";

// Helper to construct the full image source URL
const getFullImageSrc = (pathOrBase64) => {
Â  // If the string is a backend path (starting with /uploads/), prepend the full API URL
Â  if (typeof pathOrBase64 === 'string' && pathOrBase64.startsWith('/uploads/')) {
Â  Â  Â  return `${API_BASE_URL}${pathOrBase64}`;
Â  }
Â  // Otherwise, it's a Base64 URI, a full URL, or null, so return it as is
Â  return pathOrBase64;
};

/**
Â * A hook to detect clicks outside a specified element.
Â */
function useOutsideAlerter(handler) {
// ... (omitted useOutsideAlerter logic)
Â  const ref = useRef(null);
Â  useEffect(() => {
Â  Â  function handleClickOutside(event) {
Â  Â  Â  if (ref.current && !ref.current.contains(event.target)) {
Â  Â  Â  Â  handler();
Â  Â  Â  }
Â  Â  }
Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  return () => {
Â  Â  Â  document.removeEventListener("mousedown", handleClickOutside);
Â  Â  };
Â  }, [ref, handler]);
Â  return ref;
}

const DashboardLayout = ({
Â  children,
Â  navigationItems = [],
Â  activeTab,
Â  onTabChange = () => {},
Â  userType,
}) => {
Â  const { user, roles = [], currentRole, switchRole, logout } = useAuth() || {};
Â  const [sidebarOpen, setSidebarOpen] = useState(false); // For mobile
Â  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false); // For desktop
Â  const [userDropdownOpen, setUserDropdownOpen] = useState(false);
Â  const [notificationsOpen, setNotificationsOpen] = useState(false);

Â  const userDropdownRef = useOutsideAlerter(() => setUserDropdownOpen(false));
Â  const notificationsRef = useOutsideAlerter(() => setNotificationsOpen(false));

Â  const handleLogout = () => {
Â  Â  if (logout) logout();
Â  };

Â  const getUserTypeColor = (type) => {
Â  Â  switch (type) {
Â  Â  Â  case 'client': return 'from-blue-600 to-cyan-600';
Â  Â  Â  case 'coach': return 'from-purple-600 to-pink-600';
Â  Â  Â  case 'admin': return 'from-red-600 to-orange-600';
Â  Â  Â  default: return 'from-gray-600 to-gray-700';
Â  Â  }
Â  };

Â  const displayName = (user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.email) || 'User';
Â  const displayRole = currentRole || userType;

Â  // ðŸ”‘ FIX: Always prioritize the top-level user.profilePicture, which holds the image path.
Â  // The nested CoachProfile/ClientProfile typically don't have this field.
Â  const profilePictureSource = user?.profilePicture || null;


Â  // Dummy notifications data
Â  const notifications = [
Â  Â  { id: 1, message: 'New session booked with Sarah Johnson.', time: '2 hours ago' },
Â  Â  { id: 2, message: 'Your profile update was approved.', time: '1 day ago' },
Â  Â  { id: 3, message: 'You have 3 new messages waiting.', time: '2 days ago' },
Â  ];

Â  const RoleSwitcher = () => {
Â  Â  if (!roles || roles.length <= 1) {
Â  Â  Â  return <div className="text-sm text-gray-500 capitalize">{currentRole || userType}</div>;
Â  Â  }

Â  Â  return (
Â  Â  Â  <select
Â  Â  Â  Â  value={currentRole}
Â  Â  Â  Â  onChange={(e) => switchRole && switchRole(e.target.value)}
Â  Â  Â  Â  className="w-full text-sm text-gray-500 bg-transparent border-none focus:ring-0 p-0"
Â  Â  Â  Â  aria-label="Switch role"
Â  Â  Â  >
Â  Â  Â  Â  {roles.map((role) => (
Â  Â  Â  Â  Â  <option key={role} value={role} className="text-black">
Â  Â  Â  Â  Â  Â  {role.charAt(0).toUpperCase() + role.slice(1)} View
Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  ))}
Â  Â  Â  </select>
Â  Â  );
Â  };

Â  return (
Â  Â  <BreadcrumbProvider>
Â  Â  Â  <div className="flex h-screen bg-gray-50 overflow-hidden">
Â  Â  Â  Â  {/* Sidebar */}
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className={cn(
Â  Â  Â  Â  Â  Â  'fixed inset-y-0 left-0 z-50 bg-white border-r border-gray-200 transform transition-all duration-300 ease-in-out flex flex-col',
Â  Â  Â  Â  Â  Â  'lg:static lg:translate-x-0', // Always static on desktop
Â  Â  Â  Â  Â  Â  sidebarOpen ? 'translate-x-0' : '-translate-x-full', // Mobile slide-in
Â  Â  Â  Â  Â  Â  isSidebarCollapsed ? 'lg:w-20' : 'lg:w-64' // Desktop collapse
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {/* Sidebar Header */}
Â  Â  Â  Â  Â  Â <div className="h-16 flex items-center justify-between px-4 flex-shrink-0 border-b">
Â  Â  Â  Â  Â  Â  Â {!isSidebarCollapsed && <div className="font-bold text-lg text-gray-800">The Katha</div>}
Â  Â  Â  Â  Â  Â  Â <button onClick={() => setSidebarOpen(false)} className="lg:hidden p-1">
Â  Â  Â  Â  Â  Â  Â  Â <X size={24} />
Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* Navigation */}
Â  Â  Â  Â  Â  <nav className="flex-1 px-3 py-4 overflow-y-auto">
Â  Â  Â  Â  Â  Â  <ul className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  {navigationItems.map((item) => {
Â  Â  Â  Â  Â  Â  Â  Â  const Icon = item.icon;
Â  Â  Â  Â  Â  Â  Â  Â  const isActive = activeTab === item.id;
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={item.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onTabChange(item.id);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (sidebarOpen) setSidebarOpen(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={cn(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg text-left transition-all duration-200',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â isSidebarCollapsed && 'justify-center',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isActive
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-blue-600 text-white shadow-sm'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'text-gray-600 hover:bg-gray-100 hover:text-gray-800'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title={isSidebarCollapsed ? item.label : undefined}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {Icon && <Icon size={20} />}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!isSidebarCollapsed && <span className="font-medium text-sm">{item.label}</span>}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  </nav>
Â  Â  Â  Â  Â  Â {/* Logout Button */}
Â  Â  Â  Â  Â  Â <div className={cn("p-3 border-t border-gray-200", isSidebarCollapsed && 'px-2')}>
Â  Â  Â  Â  Â  Â  Â <button
Â  Â  Â  Â  Â  Â  Â  Â onClick={handleLogout}
Â  Â  Â  Â  Â  Â  Â  Â className={cn(
Â  Â  Â  Â  Â  Â  Â  Â  Â "w-full flex items-center space-x-3 px-3 py-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors",
Â  Â  Â  Â  Â  Â  Â  Â  Â isSidebarCollapsed && 'justify-center'
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  title={isSidebarCollapsed ? "Logout" : undefined}
Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â <LogOut size={20} />
Â  Â  Â  Â  Â  Â  Â  Â {!isSidebarCollapsed && <span className="font-medium text-sm">Logout</span>}
Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Main Content */}
Â  Â  Â  Â  <div className="flex-1 flex flex-col overflow-hidden">
Â  Â  Â  Â  Â  {/* Header */}
Â  Â  Â  Â  Â  <header className={cn(
Â  Â  Â  Â  Â  Â  Â  "h-16 flex-shrink-0 bg-white border-b border-gray-200 flex items-center justify-between px-6 transition-all duration-300"
Â  Â  Â  Â  Â  Â  )}>
Â  Â  Â  Â  Â  Â  Â <div className="flex items-center space-x-4">
Â  Â  Â  Â  Â  Â  Â  Â <button
Â  Â  Â  Â  Â  Â  Â  Â  Â onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â if (window.innerWidth < 1024) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â setSidebarOpen(true);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â setIsSidebarCollapsed(!isSidebarCollapsed);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  Â  Â }}
Â  Â  Â  Â  Â  Â  Â  Â  Â className="p-2 -ml-2 text-gray-600 hover:bg-gray-100 rounded-lg"
Â  Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â  Â <PanelLeft size={20} />
Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  <BreadcrumbNavigation />
Â  Â  Â  Â  Â  Â  Â </div>

Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-5">
Â  Â  Â  Â  Â  Â  Â  Â {/* Notifications */}
Â  Â  Â  Â  Â  Â  Â  Â <div ref={notificationsRef} className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setNotificationsOpen(!notificationsOpen)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 text-gray-600 hover:bg-gray-100 rounded-full relative"
Â  Â  Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <Bell size={20} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500 ring-2 ring-white"></span>
Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  {notificationsOpen && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl z-20 border border-gray-100">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-4 border-b">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <h3 className="font-semibold text-gray-800">Notifications</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <ul className="divide-y divide-gray-100 max-h-80 overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {notifications.map(notification => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={notification.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <a href="#" className="block px-4 py-3 hover:bg-gray-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-sm text-gray-700">{notification.message}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-xs text-gray-400 mt-1">{notification.time}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </a>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-2 text-center border-t">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <a href="#notifications" className="text-sm text-blue-600 hover:underline font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â View All Notifications
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </a>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â </div>

Â  Â  Â  Â  Â  Â  Â  Â {/* User Profile Dropdown */}
Â  Â  Â  Â  Â  Â  Â  Â <div ref={userDropdownRef} className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="flex items-center space-x-2 cursor-pointer" onClick={() => setUserDropdownOpen(!userDropdownOpen)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â className="w-9 h-9 rounded-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ðŸ”‘ FIXED: Use the helper and the correctly resolved profile picture source
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â src={getFullImageSrc(profilePictureSource) || `https://ui-avatars.com/api/?name=${displayName.replace(' ', '+')}&background=random`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â alt="User Avatar"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="hidden sm:block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="font-semibold text-sm text-gray-800">{displayName}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-gray-500 capitalize">{displayRole}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <ChevronDown size={16} className="text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  {userDropdownOpen && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg z-20 border border-gray-100">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-4 border-b">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="font-semibold text-gray-800">{displayName}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <RoleSwitcher />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <ul className="py-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <li><a href="#profile" className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><User size={16} className="mr-3" />Profile</a></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <li><a href="#settings" className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><Settings size={16} className="mr-3" />Settings</a></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <li className="border-t border-gray-100 my-1"></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <li><button onClick={handleLogout} className="w-full flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50"><LogOut size={16} className="mr-3" />Logout</button></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â </header>

Â  Â  Â  Â  Â  {/* Content Area */}
Â  Â  Â  Â  Â  <main className="flex-1 p-6 overflow-y-auto">
Â  Â  Â  Â  Â  Â  {children}
Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </BreadcrumbProvider>
Â  );
};

export default DashboardLayout;