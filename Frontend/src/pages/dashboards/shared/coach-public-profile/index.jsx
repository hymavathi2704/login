// Frontend/src/pages/dashboards/shared/coach-public-profile/index.jsx

import React, { useState, useEffect, useCallback } from 'react'; 
import { useParams, useNavigate } from 'react-router-dom'; 
import { getCoachById, checkClientReviewEligibility } from '@/auth/authApi'; 
import { useAuth } from '@/auth/AuthContext'; 

import NavigationLoadingStates from '@/components/ui/NavigationLoadingStates';
import Button from '@/components/ui/Button'; 
import ProfileHeader from './components/ProfileHeader';
import AboutSection from './components/AboutSection';
import ServicesSection from './components/ServicesSection';
import TestimonialsSection from './components/TestimonialsSection';

const CoachPublicProfile = ({ coachId: propCoachId }) => {
Â  const { id: urlCoachId } = useParams(); 
Â  const navigate = useNavigate();
Â  Â  
Â  const { user, isAuthenticated, roles } = useAuth();
Â  Â  
Â  // FIX: Determine the final coachId: prefer prop over URL param
Â  const finalCoachId = propCoachId || urlCoachId;
Â  Â  
Â  const [coach, setCoach] = useState(null);
Â  const [testimonials, setTestimonials] = useState([]); 
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);
  
  const [isReviewEligible, setIsReviewEligible] = useState(false);
  const isClient = isAuthenticated && roles?.includes('client');
  const isCoachSelf = isAuthenticated && user?.id === finalCoachId;


Â  const fetchCoachData = useCallback(async () => {
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  // ðŸ”‘ CRITICAL FIX: Handle missing ID immediately by setting an error.
Â  Â  Â  if (!finalCoachId) {
Â  Â  Â  Â  // Setting the error state will render the error screen, NOT the dashboard.
Â  Â  Â  Â  throw new Error('Invalid Profile Link: Coach ID is missing.');
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  // 1. Fetch Coach Profile Data
Â  Â  Â  const response = await getCoachById(finalCoachId);
Â  Â  Â  const fetchedCoach = response.data.coach;

Â  Â  Â  setCoach(fetchedCoach);
Â  Â  Â  setTestimonials(fetchedCoach.testimonials || []); 
      
      // 2. Fetch Review Eligibility
      if (isAuthenticated && isClient && !isCoachSelf) {
          const eligibilityResponse = await checkClientReviewEligibility(finalCoachId);
          setIsReviewEligible(eligibilityResponse.data.isEligible);
      } else {
          setIsReviewEligible(false);
      }
Â  Â  Â  
Â  Â  } catch (err) {
Â  Â  Â  console.error("Failed to fetch coach data:", err);
Â  Â  Â  const errorMessage = err.response?.status === 404 
Â  Â  Â  Â  ? 'Coach profile not found. The URL may be incorrect.' 
Â  Â  Â  Â  : (err?.message || 'Failed to load profile.');
Â  Â  Â  setError(errorMessage);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [finalCoachId, isAuthenticated, isClient, isCoachSelf]); 

Â  const handleDataRefresh = () => {
Â  Â  Â  fetchCoachData();
Â  };

Â  useEffect(() => {
Â  Â  fetchCoachData();
Â  }, [finalCoachId, fetchCoachData]); 

Â  const handleContact = (type, value) => console.log('Contact action:', { type, value });

Â  const handleExploreMore = () => {
Â  Â  // This button correctly navigates to the *internal* Explore Coaches page
Â  Â  navigate('/dashboard/client/explore'); 
Â  };

Â  if (loading) {
Â  Â  return <NavigationLoadingStates isLoading={true} loadingType="profile" />;
Â  }

Â  // ðŸ”‘ CRITICAL: This is the fallback check. If there's an error or no coach data, 
  // it renders an error message, NOT the explore page.
Â  if (error || !coach) {
Â  Â  return <NavigationLoadingStates 
Â  Â  Â  Â  Â  Â  Â  error={error || 'Profile could not be loaded.'} 
Â  Â  Â  Â  Â  Â  Â  retryAction={fetchCoachData} 
Â  Â  Â  Â  Â  Â  Â  loadingType="profile"
Â  Â  Â  Â  Â  Â />;
Â  }
Â  
Â  return (
Â  Â  <div className="space-y-8">
Â  Â  Â  {/* Profile Header */}
Â  Â  Â  <ProfileHeader 
Â  Â  Â  Â  coach={coach}
Â  Â  Â  Â  onContact={handleContact}
Â  Â  Â  />

Â  Â  Â  {/* Main Content Sections - Now full width, stacked */}
Â  Â  Â  <div className="space-y-8">
Â  Â  Â  Â  <AboutSection coach={coach} />
Â  Â  Â  Â  <ServicesSection 
Â  Â  Â  Â  Â  coach={coach} 
          onSessionBooked={handleDataRefresh}
Â  Â  Â  Â  />
Â  Â  Â  Â  <TestimonialsSection 
            testimonials={testimonials} 
            coachId={finalCoachId}
            isReviewEligible={isReviewEligible}
            onTestimonialSubmitted={handleDataRefresh} 
        />
Â  Â  Â  </div>

Â  Â  Â  {/* ADDED: Explore More Coaches Button */}
Â  Â  Â  <div className="flex justify-center pt-8">
Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  variant="secondary" 
Â  Â  Â  Â  Â  size="lg"
Â  Â  Â  Â  Â  onClick={handleExploreMore}
Â  Â  Â  Â  Â  iconName="ArrowRight" 
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Explore More Coaches
Â  Â  Â  Â  </Button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default CoachPublicProfile;