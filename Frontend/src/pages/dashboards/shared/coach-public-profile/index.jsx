// Frontend/src/pages/dashboards/shared/coach-public-profile/index.jsx

import React, { useState, useEffect, useCallback } from 'react'; // ðŸš¨ MODIFIED: Added useCallback
import { useParams, useNavigate } from 'react-router-dom'; 
import { getCoachById } from '@/auth/authApi'; 

import NavigationLoadingStates from '@/components/ui/NavigationLoadingStates';
import Button from '@/components/ui/Button'; 
import ProfileHeader from './components/ProfileHeader';
import AboutSection from './components/AboutSection';
import ServicesSection from './components/ServicesSection';
import TestimonialsSection from './components/TestimonialsSection';

const CoachPublicProfile = ({ coachId: propCoachId }) => {
Â  // Use useParams to extract the 'id' from the URL (used when navigating directly)
Â  const { id: urlCoachId } = useParams(); 
Â  // ADDED: Initialize navigation hook
Â  const navigate = useNavigate();
Â  Â  
Â  // FIX: Determine the final coachId: prefer prop over URL param
Â  const finalCoachId = propCoachId || urlCoachId;
Â  Â  
Â  const [coach, setCoach] = useState(null);
Â  const [testimonials, setTestimonials] = useState([]); 
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  // ðŸš¨ MODIFIED: Wrapped fetchCoachData in useCallback to prevent infinite useEffect loop
Â  const fetchCoachData = useCallback(async () => {
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  // Use the determined finalCoachId
Â  Â  Â  if (!finalCoachId) {
Â  Â  Â  Â  throw new Error('Coach ID is missing from the URL.');
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  // Use the final ID to fetch data
Â  Â  Â  const response = await getCoachById(finalCoachId);
Â  Â  Â  const fetchedCoach = response.data.coach;

Â  Â  Â  setCoach(fetchedCoach);
Â  Â  Â  setTestimonials(fetchedCoach.testimonials || []); 
Â  Â  Â  
Â  Â  } catch (err) {
Â  Â  Â  console.error("Failed to fetch coach data:", err);
Â  Â  Â  // Backend should return 404, which is handled here
Â  Â  Â  const errorMessage = err.response?.status === 404 
Â  Â  Â  Â  ? 'Coach profile not found. The profile record may not exist in the database yet.' 
Â  Â  Â  Â  : (err?.message || 'Failed to load profile.');
Â  Â  Â  setError(errorMessage);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [finalCoachId]); // Dependency on finalCoachId

Â  // ðŸš¨ NEW: Function to re-fetch data after a session is successfully booked
Â  const handleSessionBooked = () => {
      // Re-run the fetch logic to update the coach data, including the session booking status
      fetchCoachData();
Â  };

Â  useEffect(() => {
Â  Â  // Depend on finalCoachId and fetchCoachData (due to useCallback)
Â  Â  fetchCoachData();
Â  }, [finalCoachId, fetchCoachData]); 

Â  // --- Handlers for interactivity ---
Â  // Note: ServicesSection child component now handles its own booking logic directly
Â  const handleBookSession = () => console.log('Booking functionality would be implemented here'); 
Â  const handleContact = (type, value) => console.log('Contact action:', { type, value });
Â  const handleServiceClick = (type, service) => console.log('Service selected:', { type, service });

Â  // ADDED: Handler for new button
Â  const handleExploreMore = () => {
Â  Â  // FIX: Navigating to the correct, existing client dashboard route
Â  Â  navigate('/dashboard/client/explore-coaches'); // Assuming 'explore-coaches' is the proper destination
Â  };

Â  if (loading) {
Â  Â  return <NavigationLoadingStates isLoading={true} loadingType="profile" />;
Â  }

Â  if (error || !coach) {
Â  Â  return <NavigationLoadingStates 
Â  Â  Â  Â  Â  Â  Â  error={error || 'Profile could not be loaded.'} 
Â  Â  Â  Â  Â  Â  Â  retryAction={fetchCoachData} 
Â  Â  Â  Â  Â  Â  Â  loadingType="profile"
Â  Â  Â  Â  Â  Â />;
Â  }
Â  
Â  // The rest of the component uses the 'coach' state, which now holds real data
Â  return (
Â  Â  <div className="space-y-8">
Â  Â  Â  {/* Profile Header */}
Â  Â  Â  <ProfileHeader 
Â  Â  Â  Â  coach={coach}
Â  Â  Â  Â  onBookSession={handleBookSession}
Â  Â  Â  Â  onContact={handleContact}
Â  Â  Â  />

Â  Â  Â  {/* Main Content Sections - Now full width, stacked */}
Â  Â  Â  <div className="space-y-8">
Â  Â  Â  Â  <AboutSection coach={coach} />
Â  Â  Â  Â  <ServicesSection 
Â  Â  Â  Â  Â  coach={coach} 
          // ðŸš¨ NEW PROP: Pass the callback to refresh the coach data
          onSessionBooked={handleSessionBooked}
Â  Â  Â  Â  Â  onServiceClick={handleServiceClick}
Â  Â  Â  Â  />
Â  Â  Â  Â  <TestimonialsSection testimonials={testimonials} />
Â  Â  Â  </div>

Â  Â  Â  {/* ADDED: Explore More Coaches Button */}
Â  Â  Â  <div className="flex justify-center pt-8">
Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  variant="secondary" 
Â  Â  Â  Â  Â  size="lg"
Â  Â  Â  Â  Â  onClick={handleExploreMore}
Â  Â  Â  Â  Â  iconName="ArrowRight" 
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Explore More Coaches
Â  Â  Â  Â  </Button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default CoachPublicProfile;