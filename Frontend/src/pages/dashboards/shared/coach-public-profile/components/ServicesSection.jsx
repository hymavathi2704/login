import React, { useState } from 'react';
import Icon from '@/components/AppIcon';
import Button from '@/components/ui/Button';
// âœ… ADD Calendar and X for pop-up UI
import { Clock, Tag, DollarSign, TrendingUp, ArrowRight, CheckCircle, Calendar, X } from 'lucide-react';
import { useAuth } from '@/auth/AuthContext'; // CORRECTED IMPORT
import { bookSession } from '@/auth/authApi';
import { toast } from 'sonner';

// ðŸš¨ Must accept onSessionBooked prop
const ServicesSection = ({ coach, onSessionBooked }) => {
Â  const { isAuthenticated, roles, user } = useAuth(); 
Â  const [bookingSessionId, setBookingSessionId] = useState(null); 
Â  // âœ… NEW STATE: To control the session detail pop-up
Â  const [selectedSession, setSelectedSession] = useState(null); 

Â  const formatPrice = (price) => {
Â  Â  const p = parseFloat(price);
Â  Â  if (p === 0) return 'FREE';
Â  Â  // START OF CHANGE: Updated currency to Indian Rupees (INR) and locale to 'en-IN'
Â  Â  return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(p);
Â  Â  // END OF CHANGE
Â  };

Â  const formatDuration = (minutes) => {
Â  Â  const m = parseInt(minutes, 10);
Â  Â  if (m < 60) return `${m} min`;
Â  Â  const hours = Math.floor(m / 60);
Â  Â  const remaining = m % 60;
Â  Â  return remaining > 0 ? `${hours}h ${remaining}m` : `${hours}h`;
Â  };

  // âœ… NEW HELPER: Combines separate defaultDate and defaultTime fields from the backend
  const getScheduledDateTime = (session) => {
    // If both date and time exist, combine them into an ISO-like string
    if (session?.defaultDate && session?.defaultTime) {
        return `${session.defaultDate}T${session.defaultTime}`; 
    }
    return null;
  };

Â  // âœ… MODIFIED FUNCTION: Formats the date and time using the helper
Â  const formatDateTime = (session) => {
    const dateTimeString = getScheduledDateTime(session);
Â  Â  if (!dateTimeString) return 'No fixed date/time (Flexible Booking)';
Â  Â  try {
Â  Â  Â  const date = new Date(dateTimeString);
Â  Â  Â  return new Intl.DateTimeFormat('en-US', {
Â  Â  Â  Â  dateStyle: 'full',
Â  Â  Â  Â  timeStyle: 'short',
Â  Â  Â  }).format(date);
Â  Â  } catch {
Â  Â  Â  return 'Invalid date/time format';
Â  Â  }
Â  };


Â  // ðŸš¨ Must accept isBooked argument
Â  const getButtonConfig = (sessionType, isBooked) => {
Â  Â  // 1. Logic for already booked session
Â  Â  if (isBooked) {
Â  Â  Â  Â  return { 
Â  Â  Â  Â  Â  Â  label: 'Purchased / Booked', // The required text change
Â  Â  Â  Â  Â  Â  icon: 'CheckCircle', 
Â  Â  Â  Â  Â  Â  variant: 'success', 
Â  Â  Â  Â  Â  Â  disabled: true, // Disable button
Â  Â  Â  Â  Â  Â  className: 'opacity-80 cursor-default' // Style for booked state
Â  Â  Â  Â  };
Â  Â  }
Â  Â  
Â  Â  // 2. Original logic for unbooked sessions
Â  Â  if (!sessionType) return { label: 'Purchase/Book', icon: 'ArrowRight', variant: 'default', disabled: false, className: '' };
Â  Â  const type = sessionType.toLowerCase();
Â  Â  if (type.includes('subscription') || type.includes('package')) {
Â  Â  Â  return { label: 'Subscribe Now', icon: 'TrendingUp', variant: 'success', disabled: false, className: '' };
Â  Â  }
Â  Â  return { label: 'Purchase/Book', icon: 'ArrowRight', variant: 'default', disabled: false, className: '' };
Â  };

Â  const handleBookSession = async (sessionId, sessionTitle) => {
Â  Â  
Â  Â  if (!window.confirm(`Confirm booking for: ${sessionTitle}?`)) return;

Â  Â  setBookingSessionId(sessionId); 

Â  Â  try {
Â  Â  Â  await bookSession(sessionId);
Â  Â  Â  toast.success(`Successfully booked: ${sessionTitle}! View it in My Sessions.`);
Â  Â  Â  
Â  Â  Â  // ðŸš¨ CRITICAL: Call the callback to force the parent component to re-fetch coach data
Â  Â  Â  if (onSessionBooked) {
Â  Â  Â  Â  onSessionBooked(); 
Â  Â  Â  }

Â  Â  } catch (err) {
Â  Â  Â  console.error("Booking Error:", err);
Â  Â  Â  const errorMsg = err.response?.data?.error || err.message || 'Booking failed due to server error.';
Â  Â  Â  toast.error(errorMsg);
Â  Â  } finally {
Â  Â  Â  setBookingSessionId(null);
Â  Â  }
Â  };
Â  
Â  // âœ… NEW FUNCTION: Handles the click on the session card to open the modal
Â  const handleSessionClick = (session) => {
Â  Â  setSelectedSession(session);
Â  };
Â  
Â  // âœ… NEW FUNCTION: Closes the session detail modal
Â  const handleCloseModal = () => {
Â  Â  setSelectedSession(null);
Â  };


Â  const availableSessions = Array.isArray(coach?.availableSessions) ? coach.availableSessions : [];

Â  return (
Â  Â  <div className="bg-card rounded-card p-6 shadow-soft">
Â  Â  Â  <h2 className="text-2xl font-heading font-semibold text-foreground mb-6">
Â  Â  Â  Â  Digital Services Offered
Â  Â  Â  </h2>

Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  {availableSessions.length > 0 ? (
Â  Â  Â  Â  Â  availableSessions.map((session) => {
Â  Â  Â  Â  Â  Â  // ðŸš¨ CRITICAL: Read the isBooked flag passed from the backend
Â  Â  Â  Â  Â  Â  const isBooked = session?.isBooked;

            // âœ… Use the helper function here
            const scheduledDateTimeString = getScheduledDateTime(session);

Â  Â  Â  Â  Â  Â  // ðŸš¨ CRITICAL: Pass isBooked to getButtonConfig
Â  Â  Â  Â  Â  Â  const { label, icon, variant, disabled: configDisabled, className: configClassName } = getButtonConfig(session?.type, isBooked);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const isLoading = bookingSessionId === session?.id;
Â  Â  Â  Â  Â  Â  // Combine loading state with configured disabled state
Â  Â  Â  Â  Â  Â  const isDisabled = isLoading || configDisabled; 

Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  // âœ… MODIFIED: Added onClick handler to the container div
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={session?.id}
Â  Â  Â  Â  Â  Â  Â  Â  className="border border-border rounded-card p-4 hover:shadow-soft transition-smooth cursor-pointer"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSessionClick(session)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-start justify-between mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1 pr-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="font-semibold text-foreground mb-1">{session?.title}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-muted-foreground text-sm mb-2">{session?.description}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-right flex-shrink-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xl font-bold text-primary">{formatPrice(session?.price)}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-muted-foreground">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {session?.price > 0 ? 'per session' : 'free offer'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between pt-3 border-t border-dashed border-border">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-4 text-sm text-muted-foreground">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* âœ… MODIFIED: Use the scheduledDateTimeString */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Calendar size={14} /> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>
                        {scheduledDateTimeString 
                           ? new Date(scheduledDateTimeString).toLocaleString('en-US', { day: 'numeric', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit' }) 
                           : 'Flexible'}
                      </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Existing Duration and Type */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Clock size={14} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{formatDuration(session?.duration)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Tag size={14} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="capitalize">{session?.type || 'Individual'}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant={variant}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => { e.stopPropagation(); handleBookSession(session?.id, session?.title); }} // ðŸ’¡ Stop propagation to prevent modal trigger
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  iconName={icon}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  iconPosition="right"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loading={isLoading} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isDisabled} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={configClassName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? 'Processing...' : label}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="text-center py-12">
Â  Â  Â  Â  Â  Â  <Icon name="DollarSign" size={48} className="text-muted-foreground mx-auto mb-4" />
Â  Â  Â  Â  Â  Â  <p className="text-muted-foreground">
Â  Â  Â  Â  Â  Â  Â  This coach has not yet listed any digital services.
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {/* ðŸ›‘ NEW: Session Details Modal */}
Â  Â  Â  {selectedSession && (
Â  Â  Â  Â  <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4" onClick={handleCloseModal}>
Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  className="bg-card rounded-xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto p-6 space-y-4 relative"
Â  Â  Â  Â  Â  Â  onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleCloseModal}
Â  Â  Â  Â  Â  Â  Â  className="absolute top-4 right-4 text-muted-foreground hover:text-foreground transition-colors"
Â  Â  Â  Â  Â  Â  Â  aria-label="Close"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <X size={24} />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <h3 className="text-2xl font-bold text-foreground pr-10">{selectedSession.title} Details</h3>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  {/* Price and Type */}
Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-4">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2 text-lg font-bold text-primary">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <DollarSign size={20} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{formatPrice(selectedSession.price)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2 text-sm text-muted-foreground">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Tag size={16} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="capitalize">{selectedSession.type || 'Individual'}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  {/* âœ… CRITICAL: Date and Time Display - Passing the full session object */}
Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2 text-foreground font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  <Calendar size={18} />
Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatDateTime(selectedSession)}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  {/* Duration */}
Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2 text-foreground font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  <Clock size={18} />
Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Duration: {formatDuration(selectedSession.duration)}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  {/* Description (Full Details) */}
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="font-semibold text-base text-foreground mt-3 mb-1">Description:</h4>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground whitespace-pre-line">{selectedSession.description}</p>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Booking CTA - Optional, but helpful for user flow */}
Â  Â  Â  Â  Â  Â  Â  <div className="pt-4 border-t border-border mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-xs text-muted-foreground mb-2">Ready to book this service?</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant={getButtonConfig(selectedSession.type, selectedSession.isBooked).variant}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => { e.stopPropagation(); handleBookSession(selectedSession.id, selectedSession.title); handleCloseModal(); }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  iconName={getButtonConfig(selectedSession.type, selectedSession.isBooked).icon}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  iconPosition="right"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={selectedSession.isBooked}
Â  Â  Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {getButtonConfig(selectedSession.type, selectedSession.isBooked).label}
Â  Â  Â  Â  Â  Â  Â  Â  Â </Button>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default ServicesSection;